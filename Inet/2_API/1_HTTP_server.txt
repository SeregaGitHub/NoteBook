                                                HTTP-сервер и его составляющие

                                                    Класс HttpServer

  Чтобы написать свой веб-сервер, разработчики обычно используют библиотеку или фреймворк.
Это упрощает процесс разработки. В стандартной библиотеке Java есть свой HTTP-сервер.
Он находится в пакете com.sun.net.httpserver. Главный класс, реализующий логику веб-сервера, называется HttpServer.
Но прежде чем поработать с ним, расскажем о двух важных понятиях.

                                                          Порт

  При передаче по сети информация разбивается на блоки. Эти блоки называют сетевыми пакетами (англ. network packet).
Внутри пакетов есть не только данные, но IP-адрес и номер порта. Они выполняют для сетевого пакета ту же роль, что и адрес, и имя получателя на посылке.
Если по IP-адресу определяется нужный компьютер, то порт — число в диапазоне от 1 до 65535, которое идентифицирует конкретную программу.
Номер порта есть у каждой программы, подключённой к сети. Он уникален — две разные программы не могут использовать одинаковый порт на одном компьютере.
По номеру порта операционная система находит программу-получателя, которой предназначен пакет данных.

  Число 6553565535 получено в результате применения формулы 216−1216−1. Число 22 здесь — это основание двоичной системы счисления,
а 1616 — количество бит для хранения номера порта в памяти.

                                                        Сокет

  Сокет (от англ. socket — «разъём», «розетка») — это средство операционной системы, через которое программа может получить доступ к сети.
Процесс получения доступа называется открытием сокета. IP-адрес и номер сетевого порта считаются параметрами сокета.
Чтобы открыть сокет, программа должна передать операционной системе конкретные IP-адрес и номер сетевого порта,
которые она будет использовать (компьютер может быть подключён к нескольким сетям и иметь несколько IP-адресов, плюс на нём доступно 65535 портов).
Разрешено открывать одновременно несколько сокетов с разными настройками. Это необходимо, когда программа должна быть доступна из сети сразу на нескольких портах.
В некоторых случаях операционная система может отказать программе в открытии сокета. Это чаще всего происходит, если порт уже занят другой программой,
указан неверный IP-адрес или у программы недостаточно прав для открытия сокета.
Когда сокет открыт, программа начинает принимать входящие соединения или, как говорят разработчики,
«слушает порт» — реагирует на сетевые запросы в соответствии со своей логикой.

                                                Создаём HTTP-сервер

    Работа с классом HttpServer традиционно начинается с создания нового объекта. Для этого потребуется статический метод create().

  import com.sun.net.httpserver.HttpServer;
  HttpServer httpServer = HttpServer.create();

    Через этот объект будет производиться дальнейшая настройка сервера.

  Привязываем HTTP-сервер к порту
Есть два способа привязать веб-сервер к порту, на котором он будет работать. Первый — передать номер порта в качестве параметра в метод create().

  import com.sun.net.httpserver.HttpServer;
  import java.net.InetSocketAddress;
  HttpServer.create(new InetSocketAddress(8080), 0);   // создали и сразу привязали веб-сервер к порту

  Теперь наш HTTP-сервер будет слушать порт 8080. Именно на этот порт будут отправляться запросы к нему.
Также в create() был передан второй параметр — backlog (англ. «очередь»), или бэклог.
Это число соединений, которые могут находиться в ожидании, пока сервер обрабатывает текущий запрос.
Так как мы указали число 0, будет использовано стандартное значение, определённое в операционной системе.
Если, к примеру, передать 5, то сервер сможет обслужить не более пяти клиентских запросов одновременно.
Все другие входящие соединения будут разорваны.

    Второй способ привязать веб-сервер к порту — использовать метод bind(InetSocketAddress addr, int backlog) (англ. bind — «привязывать»).
В него также нужно передать номер порта и бэклог.

HttpServer httpServer = HttpServer.create(); // создали веб-сервер
httpServer.bind(new InetSocketAddress(8080), 0); // привязали его к порту

  Вызов метода bind() и передача параметров в create() — абсолютно равноценные способы привязки HTTP-сервера к порту.
В обоих случаях при привязке веб-сервера к порту мы не указали конкретный IP-адрес — это значит,
что наш сервер будет по умолчанию использовать все доступные на компьютере сети.
Итак, созданный нами веб-сервер будет работать на всех доступных IP-адресах,
слушать порт 8080 и обрабатывать стандартное число соединений, предусмотренное операционной системой.
