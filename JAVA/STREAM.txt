
                        Terminal methods (eager):

- forEach()       -  передаёт объекты из стрима , по одиночке

- reduce()        -  уменьшает количество объектов стрима до одного
                     (хорошо применим к сложению, умножению и т.п.)

- count()         -  считает количество объектов в стриме (возвращает long !!!)

- findFirst()     -  возвращает из стрима первый объект соответствующий заданным условиям

- min()           -  возвращает из стрима минимальный объект соответствующий заданным условиям

- max()           -  возвращает из стрима максимальный объект соответствующий заданным условиям

- collect()       -  преобразовывает стрим в колекцию:

                     Collectors.toList()        -  стрим в лист
                     Collectors.toSet()         -  стрим вомножество
                     Collectors.groupingBy()    -  группировка в словарь, в параметрах указывается,
                                                   какое из полей будет ключом.
                     Collectors.partitioningBy  -  стрим в словарь, в параметрах указывается условие,
                                                   ключи: true и false

=========================================================================================================

                        Intermediate methods (lazy):

- map()           -  применяет к объектам стрима, те действия, которые описаны в его параметрах

- flatMap()       -  если объекты стрима - это колекции, применяет к объектам этих коллекций
                     те действия, которые описаны в его параметрах

- filter()        -  осуществляет фильтрацию в стриме по прописанным в его параметрах условиям

- sorted()        -  выполняет сортировку, по умолчанию натуральную, в параметрах может быть Comparator

- distinct()      -  оставляет в стриме только уникальные объекты

- peek()          -  выполняет действие над каждым объектом стрима

- limit()         -  ограничивает получение объектов в стриме количеством указанным в его параметрах,
                     (если в скобках (2) выведет только первые 2 объекта)

- skip()          -  пропускает получение объектов в стриме количеством указанным в его параметрах,
                     (если в скобках (2) пропустит первые 2 объекта и выведет остальные)

---------------------------------------------------------------------------------------------------------

- mapToInt        -  то же что и map(), но только с интами.
       Double
       Long
  - sum()         -  доп методы.
  - average()
  - min()
  - max()

---------------------------------------------------------------------------------------------------------

- boxed()         -  превращает int в Integer, и т.п.

=========================================================================================================

                            Othes:

- stream()        -  перевод объектов в поток.

- parallelStream  -  перевод объектов в параллельные потоки.

- concat()        -  объединяет два стрима, один за другим.
                     (НЕ МОЖЕТ БЫТЬ ИСПОЛЬЗОВАН В ЦЕПОЧКЕ СТРИМОВ !!!)

- anyMatch()      -  проверяет, что в стриме есть хотя бы один объект, соответствующий условию

- allMatch()      -  проверяет, что в стриме все объекты, соответствуют условию

- noneMatch()     -  проверяет, что никакие объекты в стриме не соответствуют условию

=========================================================================================================

                        Stream

- Stream.of()     -  создаёт стрим из набора объектов
                     (Stream<Integer> stream = Stream.of(1,2,3,4,5);)

- Stream.generate() - генерирует поток по заданному правилу

=========================================================================================================

List<Integer> ints = List.of(1, 2, 3, 4, 5);

        String[] array = ints.stream()
                .map(String::valueOf)
                .toArray(x -> new String[x]);

        String[] arr = ints.stream()
                .map(String::valueOf)
                .toArray(String[]::new);

