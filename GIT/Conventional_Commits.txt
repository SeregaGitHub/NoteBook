Стандарт Conventional Commits предлагает вот такой формат коммита:

<type>: <subject>

Первая часть коммита type — это обозначение внесённых в код изменений.
Типов достаточно много, предлагаем вам для начала познакомиться с такими:

    feat (от англ. — навык)                —  означает добавление новой функциональности в проект.
                                              С помощью него коммитится любой законченный блок кода,
                                              который выполняет какую-то задачу.
                                              Например, метод, который считает статистику трат по категориям.
    fix (от англ. — исправить, устранить)  —  обозначение для исправленных ошибок. К примеру,
        (правка кода)                         выкидывание программой исключения NullPointerException — ошибка,
                                              а добавление проверки на null — её исправление.
    style (от англ. — стиль)               —  для коммита о визуальных исправлениях в коде.
                                              К ним относятся изменения табуляции, отступов, знаков препинания.
                                              style-правки не связаны с функциональностью или ошибками.
    refactor                               —  сообщает о переработке кода.
                                              К примеру, о том, что какой-то код был выделен в отдельный класс или
                                              громоздкий метод разбит на несколько.
    delete (от англ. — удалить)            —  для коммита с сообщением, что из программы удалён какой-то фрагмент кода.

Ещё можно встретить такие типы:
    perf: — улучшение производительности,
    docs: — обновление документации,
    test: — добавление тестов.

Вторая часть коммита subject — описание.
    Принято выбирать для таких описаний тот язык, на котором общается команда.
Мы будем писать на русском. Лучше использовать повелительное наклонение,
не ставить знаки препинания в конце сообщения и укладываться в 50 символов.

    (git commit -m "feat: добавить подсчёт суммы заказов за неделю")

-----------------------------------------------------------------------------------------------------------------------
    Есть разные подходы к именованию веток, каждая команда разработки выбирает свой.
Но при любом подходе ветки нужно называть так, чтобы другим разработчикам было понятно, что в них происходит.
Мы будем использовать указатели feature — для веток, где прорабатывается новая функциональность,
и bugfix — для веток, где ведётся работа по исправлению ошибок.
После ключевого слова идёт слеш и описание проблемы или задачи.
Это описание не должно содержать пробелов — нужно использовать нижнее подчёркивание или дефис.
Мы будем использовать дефис.
-----------------------------------------------------------------------------------------------------------------------
feature/improve-class-person
=======================================================================================================================

    Зачем нужен README.md

  Как правило, в README.md проекта можно найти такую информацию:

    - Название проекта и его краткое описание:
      кем он создан, для чего, какие решает задачи и какие закрывает проблемы.
    - Технологии, которые применяются в проекте. В чём его отличие от аналогичных.
    - Документация проекта — инструкция о том, как его запустить или протестировать.
      Здесь же можно найти системные требования: версия языка, необходимые расширения.
    - Планы проекта, если они есть.


      Как оформить README.md
    README.md — это текстовый файл. Чтобы его оформить, нужно не только залить текст,
    но и настроить шрифт, заголовки и отступы. Здесь поможет markdown (маркда́ун).
    Маркдаун — это специальный язык разметки. Он позволяет красиво отформатировать текстовый документ.
    Здесь разберём базовый синтаксис маркдауна. Все правила запоминать не нужно —
    при оформлении репозитория всегда можно вернуться к этому уроку.

    Заголовки и перенос:

        Заголовки разных уровней создают решётками:

    # H1
    ## H2
    ### H3
    #### H4
    ##### H5
    ###### H6

        Можно добавить черту под заголовком:

    ---

        Чтобы сделать перенос строки, в конце предыдущей должно стоять два пробела.

    Выделение текста

        Чтобы выделить текст курсивом, его заключают в звёздочки (астериски) или нижние подчёркивания:

    Курсив это *звёздочки* или _подчёркивания_.

        Чтобы выделить полужирным, текст окружают двойными звёздочками или двойными нижними подчёркиваниями:

    Полужирный шрифт — двойные **звёздочки** или __подчёркивание__.
    Можно совместить выделение **звёздочки и _подчёркивание_**.

        Чтобы зачеркнуть текст, его окружают двойными волнистыми чёрточками — тильдами:

    ~~Зачёркнутый текст.~~

    Списки

        Для оформления пронумерованного списка достаточно поставить в начало строки цифры с точкой на конце:

    1. Первый пункт нумерованного списка.
    2. Второй пункт.

        Ненумерованный список создаётся звёздочкой с пробелом в начале строки:

    * первый пункт ненумерованного списка;
    * второй пункт ненумерованного списка

    Ссылки

        Чтобы сделать из текста ссылку, его заключают в квадратные скобки, и затем в круглых скобках указывают её адрес:

    [Яндекс](https://www.yandex.ru)

        Если ссылку не нужно подкладывать под текст, можно просто заключить её адрес в квадратные скобки:

    [https://www.yandex.ru]

        Также можно добавить ссылке тайтл (от англ title — название, заголовок).
        Тайтл — это всплывающая подсказка, которая появляется при наведении мыши на ссылку.
        Тайтл нужно заключить в кавычки и указать внутри скобок после адреса ссылки:

    [Яндекс](https://www.yandex.ru "Я Yandex!")

    Код
    Чтобы оформить текст как код, нужно окружить его тройками косых кавычек — грависов.
    После первой тройки грависов указывают язык программирования, на котором написан код.
    В маркдауне есть поддержка синтаксиса почти всех популярных языков.

    ```javascript
    const simple = "Я просто строка!";
    console.log(simple);
    ```
    ```html
    <h1>А я просто текст</h1>
    ```
    ```java
    public class Practicum {
            public static void main(String[] args) {
        }
    }
    ```

    Обратите внимание: вторая тройка грависов стоит на отдельной строке.
    Пример
    В итоге основа файла README.md будет выглядеть так:

    ## Это репозиторий проекта "Финансовое приложение"
    #### Было сложно, но мы справились

    Наше приложение **умеет**:
    1. Считать расходы.
    2. Распределять расходы по категориям.
    3. Давать финансовые советы.

    Приложение написано на Java. Пример кода:
    ```java
    public class Practicum {
        public static void main(String[] args) {
        }
    }
    ```
    ------
    О том, как научиться создавать такие приложения, можно узнать в [Яндекс-Практикуме](https://practicum.yandex.ru/java-


    Как оформить README.md
README.md — это текстовый файл. Чтобы его оформить, нужно не только залить текст, но и настроить шрифт, заголовки и отступы. Здесь поможет markdown (маркда́ун). Маркдаун — это специальный язык разметки. Он позволяет красиво отформатировать текстовый документ.
Здесь разберём базовый синтаксис маркдауна. Все правила запоминать не нужно — при оформлении репозитория всегда можно вернуться к этому уроку.
Заголовки и перенос

    Заголовки разных уровней создают решётками:

# H1
## H2
### H3
#### H4
##### H5
###### H6

    Можно добавить черту под заголовком:

---

    Чтобы сделать перенос строки, в конце предыдущей должно стоять два пробела.

Выделение текста

    Чтобы выделить текст курсивом, его заключают в звёздочки (астериски) или нижние подчёркивания:

Курсив это *звёздочки* или _подчёркивания_.

    Чтобы выделить полужирным, текст окружают двойными звёздочками или двойными нижними подчёркиваниями:

Полужирный шрифт — двойные **звёздочки** или __подчёркивание__.
Можно совместить выделение **звёздочки и _подчёркивание_**.

    Чтобы зачеркнуть текст, его окружают двойными волнистыми чёрточками — тильдами:

~~Зачёркнутый текст.~~

Списки

    Для оформления пронумерованного списка достаточно поставить в начало строки цифры с точкой на конце:

1. Первый пункт нумерованного списка.
2. Второй пункт.

    Ненумерованный список создаётся звёздочкой с пробелом в начале строки:

* первый пункт ненумерованного списка;
* второй пункт ненумерованного списка

Ссылки

    Чтобы сделать из текста ссылку, его заключают в квадратные скобки, и затем в круглых скобках указывают её адрес:

[Яндекс](https://www.yandex.ru)

    Если ссылку не нужно подкладывать под текст, можно просто заключить её адрес в квадратные скобки:

[https://www.yandex.ru]

    Также можно добавить ссылке тайтл (от англ title — название, заголовок). Тайтл — это всплывающая подсказка, которая появляется при наведении мыши на ссылку. Тайтл нужно заключить в кавычки и указать внутри скобок после адреса ссылки:

[Яндекс](https://www.yandex.ru "Я Yandex!")

Код
Чтобы оформить текст как код, нужно окружить его тройками косых кавычек — грависов. После первой тройки грависов указывают язык программирования, на котором написан код. В маркдауне есть поддержка синтаксиса почти всех популярных языков.

```javascript
const simple = "Я просто строка!";
console.log(simple);
```
```html
<h1>А я просто текст</h1>
```
```java
public class Practicum {
        public static void main(String[] args) {
    }
}
```

Обратите внимание: вторая тройка грависов стоит на отдельной строке.
Пример
В итоге основа файла README.md будет выглядеть так:

## Это репозиторий проекта "Финансовое приложение"
#### Было сложно, но мы справились

Наше приложение **умеет**:
1. Считать расходы.
2. Распределять расходы по категориям.
3. Давать финансовые советы.

Приложение написано на Java. Пример кода:
```java
public class Practicum {
    public static void main(String[] args) {
    }
}
```
------
О том, как научиться создавать такие приложения, можно узнать в [Яндекс-Практикуме](https://practicum.yandex.ru/java-
