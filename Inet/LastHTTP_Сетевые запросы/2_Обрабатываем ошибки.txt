
                                Обрабатываем ошибки

  В процессе сетевой коммуникации нередко возникают нештатные ситуации:
оборвалась сеть, сервер оказался перегружен либо не смог выполнить действие
по каким-то внутренним причинам, клиент отправил запрос,
не соответствующий ожиданиям сервера, и так далее. В этом уроке мы расскажем,
как обрабатывать подобные ошибки, чтобы программа функционировала стабильно.

                            Обработка ошибок HTTP-запросов

  Вы уже познакомились с контрактом метода send. В его блоке throws перечислены исключения
IOException и InterruptedException. В прошлом уроке мы вынесли их в блок throws метода main,
чтобы сосредоточиться на логике отправки запроса и обработки ответа.
Однако если в такой программе произойдёт ошибка, пользователю будет показан
длинный и запутанный стек-трейс. Попробуем, например, обратиться к несуществующему адресу:

public class Practicum {
    public static void main(String[] args) throws IOException, InterruptedException {
        // создаём запрос
        HttpRequest request = HttpRequest.newBuilder()
                .GET()
                .uri(URI.create("https://nichego-tut.net"))
                .build();

        // создаём HTTP-клиент
        HttpClient client = HttpClient.newHttpClient();

        // отправляем запрос
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
    }
}
        //  Будет показан длинный и запутанный стек-трейс !!!

  Произошло исключение ConnectException. Оно является наследником IOException, указанного в блоке throws.
ConnectException и другие исключения, наследуемые от IOException,
возникают из-за проблем с сетевой коммуникацией. Например, когда сервер перегружен
и неожиданно обрывает соединение или когда использован несуществующий адрес
и клиент не может установить соединение с сервером. В подобных ситуациях лучше повторить запрос
либо попросить пользователя проверить корректность URL-адреса.

  Второй тип исключений InterruptedException может возникнуть при долгом ожидании ответа от сервера,
когда запрос обрывается на стороне клиента. Конкретные способы обработки таких ошибок
зависят от целей использования HTTP-клиента. Важно дать пользователю информацию о том,
какие шаги предпринять в случае возникновения проблемы.

-----------------------------------------------------------------------------------------------------------
Добавьте в код try...catch блок, обрабатывающий исключения:

- IOException и InterruptedException
    Пользователю должно выводиться следующее сообщение:
    Во время выполнения запроса возникла ошибка.
    Проверьте, пожалуйста, URL-адрес и повторите попытку.
- IllegalArgumentException
    Это исключение может возникнуть, если пользователь ввёл
    не соответствующий спецификации URL-адрес. Добавьте сообщение для пользователя:
    Введённый вами адрес не соответствует формату URL. Попробуйте, пожалуйста, снова.

    public class Practicum {
        public static void main(String[] args) {
            String url = "https://www.ya.ru/";

            // добавьте отлов и обработку исключений вокруг кода ниже
            URI uri = null;
            try {
                uri = URI.create(url);
            } catch (IllegalArgumentException e) {
                // e.printStackTrace();
                System.out.println("Введённый вами адрес не соответствует формату URL. " +
                        "Попробуйте, пожалуйста, снова.");
            }

            // создаём запрос
            HttpRequest request = HttpRequest.newBuilder().GET().uri(uri).build();

            // создаём HTTP-клиент
            HttpClient client = HttpClient.newHttpClient();

            // отправляем запрос
            HttpResponse<String> response = null;
            try {
                response = client.send(request, HttpResponse.BodyHandlers.ofString());
            } catch (IOException | InterruptedException e) {
                // e.printStackTrace();
                System.out.println("Во время выполнения запроса возникла ошибка." +
                        "Проверьте, пожалуйста, URL-адрес и повторите попытку.");
            }

            // выводим код состояния и тело ответа
            System.out.println("Код состояния: " + response.statusCode());
            System.out.println("Тело ответа: " + response.body());

        }
    }

-----------------------------------------------------------------------------------------------------------

                    Обработка HTTP-ответов с кодами состояния ошибки

  Вы наверняка помните, что код ответа типа 2хх свидетельствует об успешной обработке запроса.
Если сервер возвращает код в формате 4хх или 5хх, произошла ошибка. Такой ответ необходимо обработать.
Воспользуемся сервисом httpbin.org. Он возвращает ответы с указанным в URL кодом состояния.
Например, если отправить запрос по адресу http://httpbin.org/status/500,
сервер вернёт ответ с кодом состояния 500.
Таким образом, можно эмулировать ответы от сервера с нужным кодом состояния.
Запустите код ниже и поэкспериментируйте с различными кодами состояния,
меняя значение переменной requestedStatus.


class Practicum {
    public static void main(String[] args) {
        // попробуйте заменить код статуса на какой-либо другой
        // и посмотреть на реакцию вашего HTTP-клиента
        int requestedStatus = 201;
        // указываем код состояния как часть URL-адреса
        URI uri = URI.create("http://httpbin.org/status/" + requestedStatus);
        HttpRequest request = HttpRequest.newBuilder().GET().uri(uri).build();

        HttpClient client = HttpClient.newHttpClient();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            int status = response.statusCode();
            // обрабатываем коды успешного состояния
            if(status >= 200 && status <= 299) {
                System.out.println("Сервер успешно обработал запрос. Код состояния: " + status);
                return;
            }
            // обрабатываем коды состояния, говорящие об ошибке на стороне клиента
            if(status >= 400 && status <= 499) {
                System.out.println("Сервер сообщил о проблеме с запросом. Код состояния: " + status);
                return;
            }
            // обрабатываем коды состояния, говорящие об ошибке на стороне сервера
            if(status >= 500 && status <= 599) {
                System.out.println("Сервер сообщил о внутренней проблеме и невозможности обработать запрос." +
                        " Код состояния: " + status);
            } else { // обрабатываем остальные коды состояния
                System.out.println("Что-то пошло не так. Сервер вернул код состояния: " + status);
            }
        } catch (IOException | InterruptedException e) { // обрабатываем ошибки отправки запроса
            System.out.println("Во время выполнения запроса ресурса по url-адресу: '" + uri + "' возникла ошибка.\n" +
                    "Проверьте, пожалуйста, адрес и повторите попытку.");
        }
    }
}
