                                  Процесс сборки изнутри

Процесс сборки включает несколько жизненных циклов (англ. Lifecycle). Всего в Maven их три:

  -  clean (англ. «чистить, убирать») — в ходе этого цикла происходит очистка проекта.
     Удаляются все созданные ранее в процессе сборки артефакты: файлы классов, jar и другие.
  -  default (англ. «по умолчанию») — основной цикл сборки. В ходе него происходит компиляция кода, генерация тестов,
     сборка дополнительных артефактов, различного рода проверки, перенос кода в удалённый репозиторий и другие.
  -  site (англ. «страница») — этот цикл посвящён созданию проектной документации.

  Каждый цикл включает набор фаз (англ. phase). Они идут в определённой последовательности — есть подготовительные (pre-) фазы,
основные и завершающие (post-). Каждая фаза отвечает за выполнение конкретной задачи или цели (англ. goal).
Достижение цели обеспечивается за счёт запуска плагинов.
Циклы сборки Maven проработаны достаточно детально, только основной цикл default включает целых 23 фазы.
Это результат длительного развития сборщика, который позволяет разработчику настроить решение даже мелких задач.
Обилие циклов, фаз, задач и плагинов может поначалу выглядеть устрашающе. Понять принцип их взаимодействия можно на примере работы кухни в ресторане.
Сначала идёт цикл подготовки к приготовлению блюд — очищается рабочая поверхность, готовится посуда, точатся ножи, обрабатываются базовые продукты.
Затем начинается цикл готовки — всё нарезается, смешивается, варится, тушится и пассируется.
Последним идёт цикл подачи к столу — оформляется заказ, выносится блюдо, закрывается счёт.
У каждого этапа готовки есть своя цель — добиться нужной консистенции и вкуса, красиво оформить.
И для этого используются различные кухонные приборы — плагины.

Далее можно посмотреть фазы разных циклов, а для более подробного изучения, как всегда, оставим ссылку на документацию.

https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

Фазы цикла clean

  -  pre-clean (англ. «перед очисткой») — фаза, которая выполняется непосредственно перед очисткой папки с проектом.
     Например, в этой фазе можно создать резервную копию кода, чтобы не потерять уже скомпилированную версию.
  -  clean (англ. «очистка») — эта фаза включает удаление всех файлов, сгенерированных предыдущей сборкой.
     В частности, чтобы не помешать новой сборке, будут удалены папка target, классы и папка зависимостей.
  -  post-clean (англ. «после очистки») — в этой фазе можно выполнить дополнительные действия для подготовки проекта к основному этапу сборки.
     К примеру, очистить какие-то папки, неподконтрольные Maven, или вызвать сторонние средства по созданию схемы API.

Фазы цикла default

  -  validate (англ. «подтверждать») — проверка, что структура проекта верна и вся необходимая для сборки информация доступна;
  -  initialize (англ. «инициализировать») — инициализация процесса сборки, например установка настроек и создание директорий;
  -  generate-sources (англ. «генерация исходников») — генерация исходного кода для включения в компиляцию;
  -  process-sources (англ. «обработка исходников») — преобразование исходного кода, например, применение фильтров;
  -  generate-resources (англ. «генерация ресурсов») — генерация дополнительных ресурсов для включения в сборку;
  -  process-resources (англ. «обработка ресурсов») — копирование и преобразование ресурсов в директорию назначения;
  -  compile (англ. «сборка, компиляция») — компиляция проекта, без тестов;
  -  process-classes (англ. «обработка классов») — фаза постобработки исходного кода, например, улучшение байт-кода;
  -  generate-test-sources (англ. «генерация тестовых исходников») — генерация тестового кода для включения в компиляцию;
  -  process-test-sources (англ. «обработка тестовых исходников») — преобразование тестового кода, например, применение фильтров;
  -  process-test-resources (англ. «обработка ресурсов для тестов») — копирование и преобразование ресурсов для тестов;
  -  test-compile (англ. «компиляция тестов») — компиляция тестовых классов проекта;
  -  process-test-classes (англ. «обработка классов тестов») — фаза постобработки кода для тестов;
  -  test (англ. «тестирование») — выполнение тестов с использованием указанного тестового фреймворка;
  -  prepare-package (англ. «подготовка к упаковке») — подготовка к сборке артефакта;
  -  package (англ. «упаковка») — сборка артефактов проекта в формате, подходящем для распространения вашего приложения,
     например, генерация jar-архивов, war-приложений.
  -  pre-integration-test (англ. «прединтеграционное тестирование») — выполнение действий для подготовки к интеграционному тестированию;
  -  integration-test (англ. «интеграционное тестирование») — выполнение интеграционных тестов, при которых тестируются не отдельные классы,
     а их взаимодействие между собой при решении крупных тестовых задач;
  -  post-integration-test (англ. «постинтеграционное тестирование») — выполнение действий после завершения интеграционных тестов, например, очистка;
  -  verify (англ. «проверить») — проверка, что подготовленный артефакт собран правильно и соответствует критериям качества;
  -  install (англ. «устанавливать») — установка собранного артефакта в локальный репозиторий;
  -  deploy (англ. «разворачивать») — копирование в удалённый репозиторий, развёртывание проекта.

Фазы жизненного цикла site

  -  pre-site — включает процессы, которые должны быть выполнены до фазы генерации документации.
     Это может быть подготовка сведений о всех используемых сторонних библиотеках и их версиях,
     если эта информация будет полезна при чтении документации другими разработчиками;
  -  site — генерация проектной документации;
  -  post-site — эта фаза отвечает за действия, которые нужны для завершения генерации документации и подготовки к её загрузке.
     Например, проставление копирайта и лицензии на страницах документации;
  -  site-deploy — загрузка сгенерированной документации на выбранный сервер.

====================================================================================================================================

                                              Как работают плагины

  Есть и отличия от ресторанного дела. В отличие от повара Maven не может словить вдохновение и начать готовить не по рецепту.
К примеру, если сборщик получил команду выполнить очистку в фазе clean, то всегда сначала будет выполнена фаза pre-clean.
А вот фаза post-clean уже не будет выполнена, так как она идёт после clean.
За исполнение любой фазы отвечают плагины. Когда мы рассказывали про плагин-компилятор, то объясняли, что плагин мало чем отличается от обычной зависимости.
Maven понимает, что перед ним именно плагин, благодаря тому, что он сам об этом объявляет.
Это происходит за счёт описания целей и их прикрепления к конкретным фазам.

  К примеру, всё тот же плагин maven-compiler прикрепляет одну свою задачу compiler:compile к фазе compile, а другую compiler:testCompile к фазе test-compile.
В файле POM цели плагинов привязываются к нужным фазам сборки с помощью блоков <executions> и <execution> (англ. «выполнение»).
В каждом из блоков указывается фаза через тег <phase> и цель через <goal>.
В каком-то смысле можно рассматривать схему Фаза-Цель как связку абстракция-имплементация.
Для облегчения работы авторы проекта Maven уже прикрепили плагины ко всем основным фазам.
Однако все имплементации могут быть настраиваемые и взаимозаменяемые.
Например, часто можно встретить в Maven-проектах использование альтернативного компилятора plexus-compiler-eclipse от команды Eclipse (авторов одноимённой IDE).

  Разработчики IDEA выделяют некоторые фазы как наиболее важные — именно они отображены в меню Lifecycle.
Это повышает удобство и скорость разработки. В большинстве проектов, с которыми будете работать поначалу,
вы столкнётесь всего с несколькими основными фазами. Это фазы clean, compile, test, package и site.

  При этом фазы, которые не видны по умолчанию, никуда не пропали. Их можно увидеть и запустить через консоль Execute Maven Goal
(она находится под кнопкой mm сразу за значком запуска ▶️). Это меню содержит основные команды Maven, а также позволяет их вводить.
Чтобы найти нужную фазу, нужно набрать в Execute Maven Goal команду mvn help:describe -Dcmd=clean или аналогичную,
где вместо clean будет указана интересующая вас фаза.
