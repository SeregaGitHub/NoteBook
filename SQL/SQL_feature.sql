===================================================================================================================
                          ПОСЛЕДОВАТЕЛЬНОСТЬ

SELECT       -- какие столбцы
FROM         -- из какой (основной для запроса) таблицы
JOIN         -- соедининия
JOIN         -- соедининия
WHERE        -- фильтр
GROUP BY     -- группировка
HAVING SUM ? -- вторичный фильтр
ORDER BY     -- сотировка
===================================================================================================================


LIKE
IN
LIMIT
AS
CONCAT
NULL
USING
NATURAL JOIN
CAST
EXTRACT
IF
LAG
LEAD
--------------------------------------------------------------------------------------

student_id int GENERATED ALWAYS AS IDENTITY NOT NULL  -- вместо serial

student_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY

--------------------------------------------------------------------------------------
                        Pattern Matching with LIKE

%      --  0, 1 и более символов
_      --  любой символ
                                 LIKE

LIKE            -- как (используется после WHERE)
ILIKE           -- сделает сравнение НЕ чувствительным к регистру

SELECT last_name, first_name           - выбрать столбцы last_name и first_name,
FROM employees                           из таблицы employees
WHERE last_name LIKE 'B%'                где фамилия начинается с 'B'
-------------------------------------------------------------------------------------
                                 IN
                  -- в (какой-то спикок...) (используется после WHERE)

SELECT products.product_name
FROM products
JOIN categories USING (category_id)
WHERE category_name IN ('Beverages', 'Seafood')
-------------------------------------------------------------------------------------
                                 LIMIT
LIMIT  -- лимит строк запроса (всегда пишется в конце любого запроса !!!)

SELECT product_name, unit_price        - выбрать столбцы product_name, unit_price
FROM products                            из таблицы products
LIMIT 10                                 первые 10 строк
-------------------------------------------------------------------------------------
                                  AS
-- присвоит несуществующему столбцу временное имя (псевдоним).
-- НЕЛЬЗЯ использовать при WHERE и HAVING !!!

SELECT COUNT (*) AS employees_count
FROM employees
-- выдаст столбец с названием - employees_count, это делает запрос БОЛЕЕ понятным !!!
SELECT COUNT (*) employees_count
FROM employees
-- ключевое слово AS - можно не писать !!!

-- Назначить псевдоним можно и для таблицы
SELECT COUNT (emp.employees_id)   -- тогда таблица в запросе всегда должна называться так как её псевдоним
FROM employees AS emp
-------------------------------------------------------------------------------------
                               CONCAT
-- выдаст соединённые данные из двух столбцов, через прбел, с псевдонимом employees_name
CONCAT (employees.last_name, ' ', employees.first_name) AS employees_name

-------------------------------------------------------------------------------------
                           Проверка на NULL
IS NULL         -- где значение null
IS NOT NULL     -- где значение НЕ null

SELECT ship_city, ship_region          - выбрать столбцы ship_city, ship_region
FROM orders                              из таблицы orders
WHERE ship_region IS NULL                где стобец ship_region == NULL

---------------------------------------------------------------------------------------

                               USING
-- используется при JOIN вместо ON (если столбцы называются одинаково !!!)

SELECT order_date, product_name, ship_country, products.unit_price, quantity, discount
FROM orders
JOIN customers USING (customer_id)--ON orders.customer_id = customers.customer_id
INNER JOIN products USING (product_id)--ON order_details.product_id = products.product_id
--------------------------------------------------------------------------------------

                            NATURAL JOIN
-- автоматически соединит по возможным столбцам, не надо их прописывать.

                   --НИКОГДА НЕ ИСПОЛЬЗОВАТЬ !!!

SELECT order_id, customer_id, first_name, last_name, title
FROM orders
NATURAL JOIN employees
----------------------------------------------------------------------------------------
                               CAST

CAST приводит значение к заданному типу - необходимый тип указывается через AS.
Например, запись CAST(invoice_date AS DATE) конвертирует значение поля invoice_date к типу DATE.

SELECT some_field, CAST(some_date AS DATE)
FROM some_column

SELECT customer_id
FROM invoice
WHERE CAST(invoice_date AS DATE) BETWEEN '2011-05-25' AND '2011-09-25'
----------------------------------------------------------------------------------------

                             EXTRACT

EXTRACT позволяет извлечь часть даты.
Например, год извлечь можно с помощью такой записи: EXTRACT(YEAR FROM CAST(invoice_date AS date)).
----------------------------------------------------------------------------------------

                            +, -, *, /

SELECT invoice_line_id,
       invoice_id,
       invoice_line_id + invoice_id
FROM invoice_line
LIMIT 3;

invoice_line_id	   invoice_id	   invoice_line_id + invoice_id
3	                 2	           5
4	                 2	           6
5	                 2	           7
----------------------------------------------------------------------------------------
                                IF

           IF(логическое_выражение, выражение_1, выражение_2)

  Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1,
в противном случае –  значение выражения_2. Все три параметра IF() являются обязательными.

SELECT title, amount, price,
    IF(amount<4, price*0.5, price*0.7) AS sale
FROM book;

SELECT title, amount, price,
    ROUND(IF(amount < 4, price * 0.5, IF(amount < 11, price * 0.7, price * 0.9)), 2) AS sale,
    IF(amount < 4, 'скидка 50%', IF(amount < 11, 'скидка 30%', 'скидка 10%')) AS Ваша_скидка
FROM book;
----------------------------------------------------------------------------------------

            -- Найти дубликаты значений в столбце

SELECT "FRIEND_ID"
FROM "USER_FRIENDS"
GROUP BY "FRIEND_ID"
HAVING COUNT ("FRIEND_ID") > 1;

           -- Найти общих друзей для f и o
SELECT *
FROM USER_FILMORATE u, USER_FRIENDS f, USER_FRIENDS o
WHERE u.USER_ID = f.FRIEND_ID AND u.USER_ID = o.FRIEND_ID
AND f.USER_ID = 1 AND o.USER_ID = 3

-- Если в FILM айди рейтинга, а нужно ещё имя рейтинга из RATING
SELECT * FROM FILM f, RATING m WHERE f.RATING_ID = m.RATING_ID

-----------------------------------------------------------------------------------------------
                              LAG and LEAD
                              
                -- выбор пердыдущего и следующего значений

SELECT * ,
lag ("START_TIME") OVER (ORDER BY "START_TIME") AS "LAST_BOOKING",
lead ("START_TIME") OVER (ORDER BY "START_TIME") AS "NEXT_BOOKING"
FROM BOOKING b
WHERE b.ITEM_ID = 2
ORDER BY b.START_TIME
-----------------------------------------------------------------------------------------------

        -- Создание копии таблицы customers под названием tmp_customers

SELECT * 
INTO tmp_customers
FROM customers;

-----------------------------------------------------------------------------------------------
