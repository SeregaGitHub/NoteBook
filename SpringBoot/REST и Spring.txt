                                                    REST и Spring

  Итак, вы познакомились с архитектурным стилем REST, а в этом уроке расскажем, как его применить при создании веб-сервисов на Spring Framework.
Создаём класс-контроллер
Сначала немного магии! Создадим класс с эндпоинтом, который будет возвращать название приложения. Откройте проект Catsgram в IDEA.
Создайте пакет controller и добавьте в него класс SimpleController.

package ru.yandex.practicum.catsgram.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@RestController
public class SimpleController {

    @RequestMapping("/home")
    public String homePage() {
        return "Котограм";
    }
}

Больше ничего делать не нужно! Spring сам преобразует возвращаемую строку в правильный HTTP-ответ. Запустите приложение.
Теперь откройте браузер и в адресной строке вверху введите http://localhost:8080/home
(номер порта может быть другим, если вы его изменили в файле application.properties).

==============================================================================================================================

                                                                Аннотации

  Класс, который вы добавили в приложение, называется контроллер. Это специальный класс,
который предназначен для обработки HTTP-запросов от клиента и возвращения результатов. То есть класс для создания эндпоинтов.
Приложение на базе Spring Framework настраивается через аннотации. Это называется конфигурацией,
основанной на аннотациях (англ. annotation based configuration). Аннотации делают код удобным для чтения и написания.
При запуске фреймворк проверяет их наличие и связывает помеченный ими код с определённой функциональностью.
Теперь разберём, что за аннотации мы уже использовали и как они работают.

@RestController (англ. «REST-‎контроллер»)
Это аннотация, обозначающая классы-контроллеры. С её помощью Spring понимает, что класс содержит методы для обработки запросов к эндпоинтам API.
Задача методов в контроллере — вызов сервисных методов (в нужном порядке) и возвращение результатов клиенту.

@RequestMapping (англ. «‎сопоставление запроса»)
Эта аннотация даёт фреймворку понять, по какому пути можно будет отправить запрос к этому методу контроллера.
В нашем примере эндпоинт соответствует пути /home.
Пути запроса строятся относительно базового пути приложения. Например,
приложение с ресурсом в виде списка компаний companies может быть запущено и локально у разработчика по адресу localhost:8080,
и публично my-app.practicum.ru. Здесь как раз и пригодится @RequestMapping.
Достаточно добавить эту аннотацию к методу и указать путь /companies, и этот метод будет вызываться и для localhost:8080/companies,
и для my-app.practicum.ru/companies.
Начиная со Spring Framework 4.3, на основе аннотации @RequestMapping появились новые аннотации
@GetMapping, @PostMapping, @PutMapping, @DeleteMapping и @PatchMapping.
В их названии указывается, для отображения каких HTTP-методов они применяются.
Их использование заменяет применение свойства method у @RequestMapping.

@RequestMapping(value = "/home", method = RequestMethod.GET) // можно так
@GetMapping("/home") // но так проще и удобнее

С помощью @RequestMapping можно аннотировать не только методы контроллера, но и весь класс.
В этом случае путь каждого эндпоинта в контроллере будет строиться так: сначала идёт часть пути, указанная в аннотации над классом,
а затем прибавляется часть, указанная в аннотации над методом.

@RestController
@RequestMapping("/api/v1/board")
public class TaskBoardController {

    @GetMapping
    public Board getBoard() {
        // Обработка GET-запроса по пути "/api/v1/board"
    }

    @RequestMapping(path = "/tasks", method = RequestMethod.GET)
    public List<Task> getAllTasks() {
        // Обработка GET-запроса по пути "/api/v1/board/tasks"
    }

    @GetMapping("/groups")
    public List<Group> getGroups() {
        // Обработка GET-запроса по пути "/api/v1/board/groups"
    }
}

  Улучшаем код контроллера
Воспользуемся аннотацией @GetMapping, которая нужна для отображения GET-запросов. Теперь код контроллера, который возвращает имя приложения, можно переписать.

package ru.yandex.practicum.catsgram.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SimpleController {

    @GetMapping("/home")
    public String homePage() {
        return "Котограм";
    }
}


  Добавляем в Котограм второй контроллер
В Catsgram основной ресурс API — это публикация, пост. Каждый пользователь сможет разместить фотографию своего кота и добавить к ней описание.
Такая публикация должна содержать имя пользователя, который её добавил, и дату добавления. Всё это мы смоделируем в виде класса Post.
Создайте пакет model — в нём будут храниться классы, представляющие доменную модель (предметную область) приложения.
Добавьте в этот пакет класс Post в таком виде.

package ru.yandex.practicum.catsgram.model;

import java.time.Instant;

public class Post {

    private final String author; // автор
    private final Instant creationDate = Instant.now(); // дата создания
    private String description; // описание
    private String photoUrl; // url-адрес фотографии

    public Post(String author, String description, String photoUrl) {
        this.author = author;
        this.description = description;
        this.photoUrl = photoUrl;
    }

    public String getAuthor() {
        return author;
    }

    public Instant getCreationDate() {
        return creationDate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getPhotoUrl() {
        return photoUrl;
    }

    public void setPhotoUrl(String photoUrl) {
        this.photoUrl = photoUrl;
    }
}

Теперь научим приложение возвращать посты пользователям. Для этого создадим ещё один контроллер.
Как правило, контроллер содержит эндпоинты, относящиеся к конкретному ресурсу. Поэтому класс контроллера удобно называть по его имени.
Так как сейчас контроллер должен возвращать информацию о постах — назовём его PostController. Добавьте в проект такой код.

package ru.yandex.practicum.catsgram.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import ru.yandex.practicum.catsgram.model.Post;
import java.util.ArrayList;
import java.util.List;

@RestController
public class PostController {

    private List<Post> posts = new ArrayList<>();

    @GetMapping("/posts")
    public List<Post> findAll() {
        return posts;
    }

    @PostMapping(value = "/post")
    public Post create(@RequestBody Post post) {
        posts.add(post);
        return post;
    }
}

  Сейчас проект пока совсем маленький и пока информация о постах хранится прямо в контроллере.
Как правило, так не делают, но о том, как и где правильно хранить данные, мы расскажем дальше.
В новом контроллере два эндпоинта: первый возвращает список постов, а второй создаёт новый пост.
В нём используется аннотация @RequestBody (англ. «‎тело запроса»). Она применяется к аргументу метода.
@RequestBody означает, что значение аргумента нужно взять из тела запроса.
При этом объект, который пришёл в теле запроса, например, в виде JSON, будет автоматически сконвертирован в Java-объект.

  Добавляем первые посты
Откройте Postman, запустите приложение и отправьте запрос для получения списка всех постов.
Такой запрос ничего не вернёт, потому что сейчас список постов пуст. Исправим это!
Отправьте самостоятельно POST-запрос на локальный хост. В теле запроса должна храниться информация о посте в формате JSON.
Используйте вот такой JSON.

{
    "author": "catman",
    "description": "Мой любимый котик!",
    "photoUrl": "http://www.photo-cdn.catsgram.ru/catman/photo1.jpg"
}

Подобный JSON может прийти приложению, к примеру, от мобильного приложения Catsgram, после того как пользователь catman создал в нём новый пост.
Добавьте ещё несколько постов — заготовка для JSON у вас есть, нужно просто изменить значения полей. После этого снова выведите список всех постов.
Ура! В Catsgram появились первые посты.
Обратите внимание, когда вы писали сервер с использованием класса HttpServer, вам приходилось вручную парсить JSON с помощью библиотеки GSON.
Сейчас Spring сделал всё автоматически. Кроме того, вы нигде не создавали объект контроллера или объекты для постов. Spring и тут сделал всё за вас.
Получается, что нужно писать в разы меньше кода. За это фреймворк заслужил свою популярность и получил широкое распространение.
Приложение запущено на сетевом порту 8080 и использует контроллер SomeController. Прочитайте код и выберите верные утверждения.

@RestController
@RequestMapping("/home")
public class SomeController {
    private CategoryService categoryService = new CategoryService();
    private NewsService newsService = new NewsService();

    @GetMapping
    public String homePage() {
        return "Котограм";
    }

    @GetMapping("/categories")
    public List<String> listCategories() {
        return categoryService.getAllCategories();
    }

    @PutMapping("/categories/news")
    public Article saveArticle(@RequestBody Article article) {
        if(newsService.isAlreadyPublished(article)) {
            return newsService.update(article);
        } else {
            return newsService.publish(article);
        }
    }
}
