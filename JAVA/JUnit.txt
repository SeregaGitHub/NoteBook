import static org.junit.jupiter.api.Assertions.assertEquals;

====================================================================================================================
–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å JUnit –∫ –ø—Ä–æ–µ–∫—Ç—É –±–µ–∑ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏

–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç.
–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π git clone –°–°–´–õ–ö–ê, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ IDE. –í –º–µ–Ω—é —Å–≤–µ—Ä—Ö—É –≤—ã–±–µ—Ä–∏—Ç–µ File (–§–∞–π–ª) ‚Üí Open... (–û—Ç–∫—Ä—ã—Ç—å) ‚Üí –í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç.
–û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç Project structure –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Modules.
üí° Idea –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫–∏ main –∏ test –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏. –ò—Ö —Å—Ç–æ–∏—Ç —É–¥–∞–ª–∏—Ç—å: –≤—ã–¥–µ–ª–∏—Ç—å –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ -. –û—Å—Ç–∞—Ç—å—Å—è –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–æ–¥—É–ª—å ‚Äî –∫–æ—Ä–Ω–µ–≤–æ–π.
–ü–∞–ø–∫—É src/main/java –ø–æ–º–µ—Ç—å—Ç–µ –∫–∞–∫ Sources

–ü–∞–ø–∫—É src/test/java –ø–æ–º–µ—Ç—å—Ç–µ –∫–∞–∫ Tests

Idea –º–æ–∂–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–∞–ø–∫–∏, —Ç–æ–≥–¥–∞ –æ–Ω–∏ —É–∂–µ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º ‚Äî –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Libraries.
üí° Idea –º–æ–∂–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–∞–ø–∫—É lib, —Ç–æ–≥–¥–∞ –æ–Ω–∞ —É–∂–µ –±—É–¥–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ

–ù–∞–∂–º–∏—Ç–µ +, –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é ‚Äî java
–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É lib
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –º–æ–¥—É–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–≥—Ä—É–∑—è—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.

–ù–∞–∂–º–∏—Ç–µ –û–ö.
–ï—Å–ª–∏ –≤—Å—ë —Å–¥–µ–ª–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç MathsTest.

–î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É lib –≤ –ø–∞–ø–∫—É —Å–æ —Å–≤–æ–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

-----     -----     -----     -----     -----     -----     -----     -----     -----     -----     -----     -----

- –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π –∫–ª–∞—Å—Å.
- –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+T. –í –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç Create test (–∞–Ω–≥–ª. ¬´–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç¬ª).
  –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É OK ‚Äî —Ç–µ—Å—Ç –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.
- –í –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ (Testing library) –≤—ã–±–µ—Ä–∏—Ç–µ JUnit5, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Fix (–∞–Ω–≥–ª. ¬´–ò—Å–ø—Ä–∞–≤–∏—Ç—å¬ª).
- –°–∫–∞—á–∞–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ –ø–∞–ø–∫—É lib. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –æ–∫–æ–ª–æ –ø—É–Ω–∫—Ç–∞ Download to (–∞–Ω–≥–ª. ¬´–°–∫–∞—á–∞—Ç—å –≤...¬ª)
  –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É OK, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞.
- –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ñ–∞–π–ª –∫–ª–∞—Å—ÅTest. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤.
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ –ø–∞–ø–∫—É lib.
====================================================================================================================

              –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ + –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π !!!

====================================================================================================================

  –í—ã–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å => alt + enter => Create test => –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è =>
=> alt + enter => add JUnit 5.4 !!!

Run 'FileName' with Coverage  -  –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ª–∏ –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã)

@Test        -  –æ–±—ä—è–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–æ–≤—ã–º
@BeforeEach  -  –≤—ã–ø–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
@BeforeAll   -  –≤—ã–ø–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
                (–≤ @BeforeAll –º–µ—Ç–æ–¥ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º)
@AfterEach   -  –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
@AfterAll    -  –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤

    (–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –æ–¥–∏–Ω —Ä–∞–∑: @BeforeAll –∏ @AfterAll, –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º.
                  –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –Ω–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–π, —Ç–µ—Å—Ç –ø–æ–ø—Ä–æ—Å—Ç—É –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è !!!
              @BeforeEach –∏ @AfterEach - –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞–¥ –ù–ï –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ú –º–µ—Ç–æ–¥–æ–º !!! )

–ï—â—ë –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç JUnit ‚Äî —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Assertions.
–û–¥–∏–Ω –∏–∑ –Ω–∏—Ö, assertEquals(Object expected, Object actual, [String message]) –º—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö.
–û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∏–ª–∏ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ü–µ—Ä–≤—ã–π ‚Äî —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—Ç–æ—Ä–æ–π ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π.
–¢—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ä–∞–≤–µ–Ω –æ–∂–∏–¥–∞–µ–º–æ–º—É,
–¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ —Ç–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç –æ—à–∏–±–∫—É


import static org.junit.jupiter.api.Assertions.*

- Assertions.assertEquals(Object expected, Object actual, [String message])
- Assertions.assertNotEquals(Object expected, Object actual).
- Assertions.assertNull(Object object)
- Assertions.assertNotNull(Object object)
- assertTrue(value)
- assertFalse(value)
- assertArrayEquals(arrayTwo, arrayOne);  –ò–õ–ò  Arrays.equals(arrayOne, arrayTwo);
--------------------------------------------------------------------------------------------------------------------
    –ö–ª–∞—Å—Å Executable, –º–µ—Ç–æ–¥ execute():

    new Executable() {
        @Override
        public void execute() {        –ò–õ–ò           () -> {
            // –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥                           // –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥
        }                                            }
    };                                          };
--------------------------------------------------------------------------------------------------------------------

- assertThrows(..., ...)
 –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: 1) –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –∏ 2) –∫–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Executable —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º execute()

class ExceptionTest {

    @Test
    void shouldThrowException() {

        // –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø–∞–¥—ë—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é exception
        final ArithmeticException exception = assertThrows(

                // –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏
                ArithmeticException.class,

                // —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Executable
                new Executable() {
                    @Override
                    public void execute() {
                        // –∑–¥–µ—Å—å –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
                        // –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 0 –æ–∂–∏–¥–∞–µ–º ArithmeticException
                        int number = 10 / 0;
                    }
                });

        // –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ exception –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        assertEquals("/ by zero", exception.getMessage());
    }
}

=========================================================================================================================

                              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

@Data
@Builder
public class Car {

  private static int carId = 0;

  private int power;
  private int weight;
  private int height;
  private int length;

  @Builder.Default
  private String color = "black";
  @Builder.Default
  private int numberOfWheels = 4;
  @Builder.Default
  private int numberOfDoors = 5;

  private String privateMethodName() {
      return "I am privateMethod() !!!";
    }
}


class CarTest {

    Car car;

    @BeforeEach
    void beforeEach() {
        car = Car.builder()// –≤—ã–∑–æ–≤ –∫–ª–∞—Å—Å–∞-—Å—Ç—Ä–æ–∏—Ç–µ–ª—è
                .color("white") // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
                .power(200) // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏
                .height(1560) // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã
                .length(4280) // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏–Ω—ã
                .weight(1450) // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã
                .build(); // —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Car
    }

    @Test
    void testPrivateMethod() {
        try {
            Method method = Car.class.getDeclaredMethod("privateMethodName", null);
     // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è-method         –ü–∏—à–µ–º - –∫–ª–∞—Å—Å               —Ç–æ—á–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞
                                                                       // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä - String.class

            method.setAccessible(true);        // –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ - –¥–æ—Å—Ç—É–ø–Ω—ã–º

            assertEquals("I am privateMethod() !!!", method.invoke(car).toString());

//method.invoke()-–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥   –ø–æ—Å–ª–µ car –º–æ–≥—É—Ç –±—ã—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ —É –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã !!!
                                                                             –ù–∞–ø—Ä–∏–º–µ—Ä - (method.invoke(car, "someString")

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException | IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }
}

----------------------------------------------------------------------------------------------------------------------

public class SomeClass {
    private static int userId = 0;
}


@AfterEach
    void clearSomeClass() {

        System.out.println("userId - before reflection: " + SomeClass.getUserId());
        try {
            Field field = SomeClass.class.getDeclaredField("userId");
            field.setAccessible(true);
            // field.set(SomeClass.class.getDeclaredField("userId"), 0);
            field.set(field, 0);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new RuntimeException(e);
        }
        System.out.println("userId - after reflection: " + SomeClass.getUserId());
    }
