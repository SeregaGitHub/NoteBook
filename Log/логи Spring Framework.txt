                                              Логи Spring Framework

  Spring Framework появился намного раньше SLF4J, поэтому внутри него нет связки SLF4J и Logback.
Вместо неё используется Apache Commons Logging — фреймворк логирования, который поддерживает различные реализации.
Начиная с версии 5.0, вместе со Spring Framework поставляется специальный модуль spring-jcl.
Он позволяет перенаправлять логи из Apache Commons Logging в SLF4J и даже напрямую в Logback, если эти фреймворки подключены к проекту.
В этом уроке на примере Spring Framework мы расскажем о том, какими могут быть зависимости логирования и как их правильно подключать к вашей программе.

                                              Настройка зависимостей

  Любой более или менее сложный проект обычно обращается к сторонним библиотекам, которые в свою очередь привлекают другие библиотеки.
Чтобы собрать или запустить такой проект, все библиотеки должны быть доступны в его classpath.
Maven берёт эту работу на себя. Программист указывает нужные зависимости, а Maven автоматически загружает их и делает доступными зависимости зависимостей,
которые называются транзитивными (англ. transitive, «переходный»). Например, если проект АА зависит от библиотеки ББ,
а она зависит от библиотеки ВВ, то ВВ является транзитивной зависимостью для АА.
Проверить, какие зависимости транзитивно попадают в проект, можно во вкладке Maven в IntelliJ IDEA.
Для этого откройте узел Dependencies (англ. «зависимости»):

  Транзитивные зависимости уже подключены к catsgram, и вы можете свободно обращаться к ним, не указывая в сборке.
Но в общем случае лучше не полагаться на то, что нужные зависимости будут транзитивно подключены к проекту.
Правильнее использовать прямые зависимости — если вам нужна какая-то библиотека или фреймворк, пропишите их непосредственно в pom.xml, указав конкретную версию.
Однако в этом правиле есть зависимости-исключения. В экосистеме Spring они называются стартерами.
Стартер (англ. starter) — это набор библиотек и конфигураций, который специально создаётся для транзитивного внесения в проект нужных зависимостей.
При этом все версии таких зависимостей протестированы на совместимость друг с другом и со Spring Framework.
Зависимость spring-boot-starter-web, которая указана в проекте catsgram, — это как раз пример стартера:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

  Стартер spring-boot-starter-web содержит библиотеки и конфигурации, которые нужны для создания web-приложений на базе Spring Framework.
А так как во всех приложениях используется логирование, этот стартер также содержит и фреймворки логирования.
Как видно из иллюстрации выше, прямая зависимость spring-boot-starter-web (указанная в pom.xml нашего проекта)
транзитивно добавляет ещё один стартер spring-boot-starter, который в свою очередь подключает spring-boot-starter-logging,
и уже он добавляет нужные фреймворки логирования. Благодаря этому проект catsgram по умолчанию настроен таким образом,
что в качестве системы логирования в нём используется связка SLF4J и Logback. И да, иногда цепочка зависимостей может быть очень длинной!
Любой стартер от команды Spring Framework транзитивно добавляет в проект два фреймворка логирования: logback-core и slf4j-api.
А в Spring Boot есть специальный стартер spring-boot-starter-logging, который также содержит эти фреймворки:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-logging</artifactId>
</dependency>

  Вы можете или явно добавлять в проектspring-boot-starter-logging, или использовать его в качестве транзитивной зависимости
уже имеющегося стартера spring-boot-starter-web.

                                                      Логи Spring Framework

  Вы могли заметить, что каждый запуск проекта в консоли или в IntelliJ IDEA сопровождается выводом каких-то записей.
Это и есть та информация, которую логирует Spring Framework и его компоненты.

  По умолчанию в IntelliJ IDEA записи из лога выводятся на консоль — за это отвечает компонент ConsoleAppender из фреймворка Logback.
При этом все сообщения приведены к единому формату — это работа компонента PatternLayout.
Рассмотрим этот формат на примере последней записи в логе:

2021-12-22 01:09:53.516 INFO 5198 --- [        main] r.y.p.catsgram.CatsgramApplication   : Started CatsgramApplication in 3.055 seconds (JVM running for 3.841)

Запись состоит из следующих элементов:

    2021-12-22 01:09:53.516
      Дата и время. Время указано с миллисекундной точностью.

    INFO
      Уровень важности сообщения: ERROR, WARN, INFO, DEBUG или TRACE.

    5198
      Идентификатор процесса, присвоенный операционной системой программе.

    ---
      Разделитель, обозначающий начало логируемой информации.

    [           main]
      Название потока, заключённое в квадратные скобки. Под него выделяется определённое количество символов (по умолчанию 15).
      Если название слишком длинное, оно обрезается, а если короткое — оставшееся место заполняется пробелами.
      В нашем примере название короткое, поэтому слева от него добавлены пробелы.

    r.y.p.catsgram.CatsgramApplication
      Имя логера. Обычно это название класса, в котором логер был создан. Оно не приводится целиком: названия пакетов сокращаются до первых букв.
      В нашем примере это r.y.p.catsgram.CatsgramApplication, а вот полная версия:

  ru.yandex.practicum.catsgram.CatsgramApplication

      Под название логера тоже выделено определённое количество символов (по умолчанию 40).
      В нашем случае название уместилось полностью, и справа от него были добавлены пробелы.

    Started CatsgramApplication in 3.055 seconds (JVM running for 3.841)
      Сообщение, которое было передано логеру: информация о том, сколько времени потребовалось фреймворку на запуск приложения,
      а также общее время работы JVM с момента старта.

  Пробелы, которыми дополняются названия потоков и логгеров, необходимы для того,
чтобы все записи располагались одинаково — как в таблице с невидимыми границами.
Это облегчает поиск нужной записи, когда программист просматривает большие объёмы лога.

  Окно Run в IntelliJ IDEA также имеет небольшой функционал для облегчения работы с логами:

-  Режим soft wraps — перенос текста на новую строку, если она не помещается в видимую область окна консоли.
-  Прокрутка до конца — прокручивает логи до конца. А если в консоль был выведен стек-трейс ошибки, эта кнопка позволит перейти к его последней строке.
-  Печать — отправка записей на печать.
-  Очистка — удаляет из консоли весь текст.
