
import java.util.ArrayList;

* ArrayList<String> list = new ArrayList<>();
- System.out.println(String.join(" ", list));

* ArrayList<ArrayList<String>> listWords = new ArrayList<>();
                (Список списков строк)

* ArrayList<Integer> list1 = new ArrayList<>();
* ArrayList<Integer> list2 = new ArrayList<>(30);
* ArrayList<Integer> list3 = new ArrayList<>(list1);

* List<Integer> myList2 = new LinkedList<>();
----------------------------------------------------------------------------------------------------

- list.trimToSize()          -  обрезает пустые ячейки внутреннего массива
- list.add(obj)              -  добавляет в конец списка объект obj
- list.add(index, obj)       -  добавляет в список по индексу index объект obj
- list.addAll(col)           -	добавляет в конец списка все элементы списка col.
- list.addAll(index, col)    -	добавляет в список по индексу index
                                все элементы списка col. Если в результате добавления
                                список был изменен, то возвращается true,
                                иначе возвращается false
- list.get(index)            -	возвращает объект из списка по индексу index
- list.set(index, obj)       -  присваивает значение объекта obj элементу,
                                который находится по индексу index
- list.indexOf(obj)          -  возвращает индекс первого вхождения
                                объекта obj в список. Если объект не найден, то возвращается -1
- list.lastIndexOf(obj)      -  возвращает индекс последнего вхождения
                                объекта obj в список. Если объект не найден, то возвращается -1
- list.clear                 -  очищает список
- list.remove(index)         -  удаляет объект из списка по индексу index,
                                возвращая при этом удаленный объект
- list.remove(Object o)      -  удаляет объект из списка по значению
- list.removeAll(___)        -  удаляет из списка все элементы, которые указаны в параметре
                                (Можно передать один объект или другой спикок объектов.)
- list.retainAll(___)        -  удаляет из списка все элементы, которых НЕТ в параметре
                                (Можно передать один объект или другой спикок объектов.)
- isEmpty()                  -  Проверка наличия элементов.
                                Возвращает true если в коллекции нет ни одного элемента.
- list.toArray()             -  превращает список в массив
- list.contains(obj)         -  проверяет, есть ли элемент obj в списке list.
                                Возвращает значение boolean
- list.containsAll(___)      -  проверяет, есть ли ВСЕ элементы из параметра в списке list.
                                Возвращает значение boolean
- list.size()                -	находит размер списка (количество элементов)
- list.subList(start, end)   -  получает набор элементов,
                                которые находятся в списке между индексами start и end
- toArray()                  -  Преобразование набора в массив элементов.

- List.of()                  - Создание неизменяемого списка.         List<Integer> integerList = List.of(1, 2, 3);
- Arrays.asList()            - Создание неизменяемого списка.         List<Integer> integerList = Arrays.asList(1, 2, 3);

- List.copyOf()              - Копирование в неизменяемый список.     List<String> stringList = List.copyOf(list);

- addFirst() и - addLast()   -  только для LinkedList !!!
- list.removeFirst();
- list.removeLast();
- peekFirst и peekLast       -  возвращают , только для LinkedList !!!
- poolFirst и poolLast       -  возвращают, удаляя , только для LinkedList !!!
----------------------------------------------------------------------------------------------------
* Vector<String> vector = new Vector<>();

    В отличии от ArrayList и LinkedList используется при многопоточности.
  Но является устаревшим и нерекомендовнным для использования !!!

- vector.firstElement()
- vector.lastElement()
----------------------------------------------------------------------------------------------------
* Stack<String> stack = new Stack<>();

    LIFO используется при многопоточности.
  Но является устаревшим и нерекомендовнным для использования !!!

- stack.push()     -  вставляет элемент на верхушку стэка (конец списка)
- stack.pop()      -  получает элемент с верхушки стэка и сразу удаляет его
- stack.peek()     -  получает элемент с верхушки стэка
- stack.isEmpty()  -  проверкастэка на пустоту
----------------------------------------------------------------------------------------------------

- HashSet<String> states = new HashSet<String>();

* HashSet порядок элементов оптимизирован для быстрого поиска
* LinkedHashSet хранит элементы в порядке добавления
* TreeSet объекты хранятся отсортированными по возрастанию

- add(Object o)             -  Добавление элемента в коллекцию, если он отсутствует.
                               Возвращает true, если элемент добавлен.
- addAll(Collection c)      -  Добавление элементов коллекции, если они отсутствуют.
- clear()                   -  Очистка коллекции.
- contains(Object o)        -  Проверка присутствия элемента в наборе.
                               Возвращает true, если элемент найден.
- containsAll(Collection c) -  Проверка присутсвия коллекции в наборе.
                               Возвращает true, если все элементы содержатся в наборе.
- equals(Object o)          -  Проверка на равенство.
- hashCode()                -  Получение hashCode набора.
- isEmpty()                 -  Проверка наличия элементов.
                               Возвращает true если в коллекции нет ни одного элемента.
- iterator()                -  Функция получения итератора коллекции.
- remove(Object o)          -  Удаление элемента из набора.
- removeAll(Collection c)   -  Удаление из набора всех элементов переданной коллекции.
- retainAll(Collection c)   -  Удаление элементов, не принадлежащих переданной коллекции.
- size()                    -  Количество элементов коллекции
- toArray()                 -  Преобразование набора в массив элементов.
- toArray(T[] a)            -  Преобразование набора в массив элементов.

    В отличии от предыдущего метода, который возвращает массив объектов типа Object,
  данный метод возвращает массив объектов типа, переданного в параметре.

  TreeSet<Integer> treeSet = new TreeSet<>();

- treeSet.first()
- treeSet.last()
- treeSet.headSet(___)      -  Выведет все заначения меньше переданного в параметры
- treeSet.tailSet(___)      -  Выведет все заначения начиная с переданного в параметры и выше
- treeSet.subSet(_, _)      -  Выведет все заначения начиная с первого элемента до последнего
