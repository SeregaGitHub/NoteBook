
String 	          StringBuffer           	StringBuilder
Изменяемость 	      Immutable (нет)   	   mutable (да) 	         mutable (да)
Расширяемость   	     final (нет) 	        final (нет)         	  final (нет)
Потокобезопасность 	         Да,  	               Да,  	                   Нет
за счет неизменяемости    за счет синхронизации
Когда использовать При работе со строками,     При работе со строками,  При работе со строками,
которые редко будут       которые часто будут     которые часто будут
модифицироваться           модифицироваться       модифицироваться,
                    в многопоточной среде     в однопоточной среде
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
public static void main(String[] args) {
StringBuffer sb = new StringBuffer();

sb.append(new Integer(2));
sb.append("; ");                  или   .append("; ");
sb.append(false);                       .append(false);
sb.append("; ");                         и т.д.
sb.append(Arrays.asList(1,2,3));
sb.append("; ");

System.out.println(sb); // 2; false; [1, 2, 3];
}

public static void main(String[] args) {
    String numbers = "0123456789";
    StringBuffer sb = new StringBuffer(numbers);

- substring() - обрезает строку с определенного индекса до конца,
                либо до определенного индекса

        System.out.println(sb.substring(3)); // 3456789
        System.out.println(sb.substring(4, 8)); // 4567

- replace(3, 5, "ABCDE") - замена символов

    System.out.println(sb.replace(3, 5, "ABCDE")); // 012ABCDE56789

- reverse() - символы в обратном порядке

    sb = new StringBuffer(numbers);
    System.out.println(sb.reverse()); // 9876543210

- sb.reverse(); // Вернем изначальный порядок
- delete(5, 9) - удаление символов

    sb = new StringBuffer(numbers);
    System.out.println(sb.delete(5, 9)); // 012349
    System.out.println(sb.deleteCharAt(1)); // 02349

- insert(1, "One") - вставка символов, по индексу

    System.out.println(sb.insert(1, "One")); // 0One2349
}

- setLength(8) - изменение длины строки (теперь она 8 символов)
- charAt() получает символ по определенному индексу
- setCharAt() устанавливает символ по определенному индексу
- преобразовать StringBuilder обратно в строку:

    String s = "Bender";
    StringBuilder s2 = new StringBuilder(s);
    s2.append("!");
    s = s2.toString();
