
* HashMap - произвольный порядок
* LinkedHashMap - в порядке добавления
* TreeMap - сортирует значения по критерию
* Hashtable<Integer, String> hashtable = new Hashtable<>();  //  - Потокобезопасный, но устаревший
                                                             //  - В отличии от HashMap ни K, ни V
                                                             //  не могут быть null
- import java.util.HashMap;

- java.util.HashMap<String, String> dicT = new java.util.HashMap<String, String>();

- Map<String, ArrayList<String>> dicT = new HashMap<>();
- Map<Integer, String> dicT = new HashMap<Integer, String>();
- Map<Integer, String> map1 = new HashMap<>(16, 0.75f);  // 16 - initialCapacity, 0.75f - loadFactor
                                                            16 * 0.75 = 12 - максимальный размер заполненных бакетов

- LinkedHashMap<Integer, String> lhm = new LinkedHashMap<>(16, 0.75f, true);  // (accessOrder) Если true, то информация хранится в порядке использования
- public TreeMap(Comparator<? super K> comparator)


- dicT.get(k)                              -  получить все значения ключа (к)
                                              (если такого элемента не окажется, то возвращается - null)
- dicT.getOrDefault(k, v)                  -  получить все значения ключа (к)
                                              (если такого элемента не окажется, то возвращается - v)
- dicT.keySet()                            -  Получает список всех ключей
- dicT.values()                            -  Получает список всех значений
- dicT.put(k, v)                           -  помещает в коллекцию новый объект с ключом k и значением v
                                              (если в коллекции уже есть   подобным ключом, то он перезаписывается)
- dicT.putIfAbsent(k, v)                   -  помещает в коллекцию новый объект с ключом k и значением v
                                              (если в коллекции еще нет элемента с подобным ключом)
- dicT.compute(k, (k,v) -> v...)           -  для указанного ключа k этот метод устанавливает в качестве v результат выполнения функции -> v...                                             
- dicT.computeIfPresent()                  -  производит какое-то действие со значением в dicT, если оно там есть
- dicT.computeIfAbsent()                   -  производит какое-то действие со значением в dicT, если его там нет
- dicT.merge(k, new_v, (v, nv) -> v + nv)  -  объединит старое значение с новым по ключу.
- dicT.remove(k)                           -  удаляет значение по его ключю
                                              (если такого элемента не окажется, то возвращается - null)
- void clear()                             -  очищает коллекцию
- dicT.isEmpty()                           -  возвращает true, если коллекция пуста
- dicT.containsKey(k)                      -  возвращает true, если коллекция содержит ключ k
- dicT.containsValue(v)                    -  возвращает true, если коллекция содержит значение v
- dicT.putAll(dicT_2)                      -  две мапы объединить в одну
- dicT.size()                              -  возвращает количество элементов коллекции

* TreeMap:
- treeMap.descendingMap()                  -  разворачивает элементы в обратном порядке
- treeMap.tailMap(K)                       -  выдаст все значения от ключа K и далее
- treeMap.headMap(K)                       -  выдаст все значения до ключа K
- treeMap.firstKey()
- treeMap.firstEntry()
- treeMap.lastKey()
- treeMap.lastEntry()
- treeMap.pollFirstEntry()
- treeMap.pollLastEntry()

--------------------------------------------------------------------------------------------------------------------
for (var parE: dicT.entrySet()
     ) {
    System.out.print(parE.getKey() + "-->" + parE.getValue());
}
--------------------------------------------------------------------------------------------------------------------
- K getKey()                               -  возвращает ключ объекта отображения
- V getValue()                             -  возвращает значение объекта отображения
- V setValue(V v)                          -  устанавливает для текущего объекта значение v

- V getOrDefault(Object k, V defaultValue) -  возвращает значение объекта,
                                              ключ которого равен k. Если такого элемента не окажется,
                                              то возвращается значение defaultVlue.
                                              После добавления возвращает предыдущее значение для ключа k,
                                              если он уже был в коллекции. Если же ключа еще не было в коллекции,
                                              то возвращается значение null



- for (Map.Entry<Integer, Car> entrY: maP.entrySet()
             ) {
            System.out.println(entrY.getKey() + " : " + entrY.getValue());
        }

- Set<Map.Entry<K, V>> entrySet():    возвращает набор элементов коллекции.
                                      Все элементы представляют объект Map.Entry
                                      (ФИШКИ)

- boolean equals(Object obj)               -  возвращает true, если коллекция
                                              идентична коллекции, передаваемой через параметр obj


• Set<Integer> keyS = pasportS.keySet()    -  возвращает набор всех ключей отображения

• pasportS.values()                        - возвращает набор всех значений отображения -
               - ArrayList<String> valueS = new ArrayList<>(pasportS.values())

• void putAll(Map<? extends K, ? extends V> map):   -   добавляет в коллекцию
                                                        все объекты из отображения map

• pasportS.remove(Object k)                -  удаляет объект с ключом k
• pasportS.size()                          -  возвращает количество элементов коллекции
* pasportS.putAll(pasportS_2)              -  копирует pasportS_2 в pasportS

- Обобщенный интерфейс Map.Entry<K, V> представляет объект
  с ключом типа K и значением типа V и определяет следующие методы:

• boolean equals(Object obj)               -  возвращает true, если объект obj,
                                              представляющий интерфейс Map.Entry, идентичен текущему
• int hashCode()                           -  возвращает хеш-код данного объекта

Set<ТКлюч> keySet()                        - Возвращает множество ключей коллекции

Collection<ТЗначение> values()             - Возвращает множество элементов коллекции

Set<Map.Entry<TКлюч, TЗначение>> entrySet() - Возвращает все значения коллекции
                                   в виде множества (Set) пар (Map.Entry).абор всех значений отображения -
  - ArrayList<String> valueS = new ArrayList<>(pasportS.values())

• void putAll(Map<? extends K, ? extends V> map)  -  добавляет в коллекцию
                                                     все объекты из отображения map
• pasportS.remove(Object k)                       -  удаляет объект с ключом k
* pasportS.putAll(pasportS_2)                     -  копирует pasportS_2 в pasportS

- Обобщенный интерфейс Map.Entry<K, V> представляет объект
  с ключом типа K и значением типа V и определяет следующие методы:

• boolean equals(Object obj)                 -  возвращает true, если объект obj,
                                                представляющий интерфейс Map.Entry, идентичен текущему
• int hashCode()                             -  возвращает хеш-код данного объекта

Set<ТКлюч> keySet()                          -  Возвращает множество ключей коллекции

Collection<ТЗначение> values()               -  Возвращает множество элементов коллекции

Set<Map.Entry<TКлюч, TЗначение>> entrySet()  -  Возвращает все значения коллекции
                                                в виде множества (Set) пар (Map.Entry).
