                                                  REST

  REST — это аббревиатура от REpresentational State Transfer (англ. «передача репрезентативного состояния»).
На практике можно встретить множество разных трактовок термина REST. Его называют набором правил, технологией, подходом, инструментом.
Мы будем понимать под REST архитектурный стиль — набор принципов проектирования распределённых систем.
Все принципы REST собраны в диссертации Роя Филдинга «Архитектурные стили и дизайн сетевых программных структур», написанной в 2000 году. Вот ключевые из них.

-  Клиент-серверная архитектура (англ. Client-Server).

Основные участники коммуникации — клиент и сервер, их ответственность разделена.
Ответственность клиента — пользовательский интерфейс, ответственность сервера — данные.
Если меняется логика хранения информации на сервере, не нужно менять логику работы клиента.

-  Сервер не хранит информацию о состоянии клиента (англ. Stateless).

Каждый запрос клиента к серверу должен быть независимым, как будто он сделан в первый раз.
В нём должно быть отражено, кто запрашивает данные и какие данные запрашиваются. Сервер не должен хранить информацию о клиенте.

-  Единообразие интерфейса (англ. Uniform Interface).

Интерфейс обращения к серверу одинаков для всех и не зависит от клиента.
Запрос к данным формируется по одним и тем же правилам из браузера, мобильного приложения и с «умного» чайника.

-  Многоуровневость архитектуры (англ. Layered system).

Можно строить сложные системы, не нарушая того, что в коммуникации участвуют только клиент и сервис.
При этом каждый компонент системы должен видеть только свой уровень.
К примеру, приложение для вызова такси на телефоне в качестве клиента обращается к сервису поиска машин как к серверу,
а этот сервис уже в качестве клиента взаимодействует с навигатором — сервером.
При этом навигатор не видит данные, которые были отправлены в сервис поиска такси,
а приложение на телефоне не знает, что сервис обращался к навигатору.

-  Кешируемость (англ. Cache).

Данные ответа могут быть кешированы. Это значит, что можно сохранить полученные данные на клиенте,
а при идентичном запросе взять их из памяти клиента — кеша, а не ждать их с сервера.
Принцип кеширования важен при построении систем, которые обрабатывают большое количество однотипных запросов.
Нет смысла запрашивать данные повторно, если они никак не изменились. Это актуально, к примеру, для новостных сайтов и соцсетей.

-  Код по запросу (англ. Code on demand).

Функциональность клиента может быть расширена кодом, приходящим с сервера.
В 2000 году исполняемый код с сервера возвращали не так часто, потому и появился этот принцип.
Сейчас такое можно встретить повсеместно: это используется для «оживления» страниц и исполнения каких-то сценариев на стороне клиента.

=======================================================================================================================================

                                  Правила наименования ресурсов для RESTful API.

(Они простые и пригодятся вам при написании эндпоинтов)
https://restfulapi.net/resource-naming/

-  Использовать существительные.

Чаще всего ресурсы именуют существительными во множественном числе.

/posts
/api/starships

Иногда применяют существительные в единственном числе.

/posts/{post-id}/author
/users/me

Можно выбрать глагол в качестве существительного, но это бывает удачным крайне редко.

/posts/{post-id}/reshare  # расшаривание
/refresh  # обновление

-  Слеш указывает на иерархию.

При именовании ресурса слеш используется не случайным образом, а для указания иерархии по принципу «от общего к частному».
Например, цепочка «Все пользователи → Конкретный пользователь по ID → Все его посты → Конкретный пост по ID» будет выглядеть так.

/users/{user-id}/posts/{post-id}

-  Слеш в конце URL лучше не использовать.

Насчёт того, ставить или нет слеш в конце URL, — есть два мнения.
Первое — не ставить, так как такой «висячий» слеш не добавляет информации.
Второе — слеш в конце URL для любого ресурса, который может содержать дочерние элементы.

# Первый вариант — нет слеша в конце URL
/users/{user-id}/posts

# Второй вариант — слеш в конце URL
/users/{user-id}/posts/

В REST нет однозначных рекомендаций, какой из подходов предпочтительнее.
Иногда может возникнуть ошибка, если запрос не пройдёт из-за отсутствия закрывающего слеша.
В то же время отразить, что ресурс содержит дочерние элементы, лучше с помощью правильно подобранных существительных.
Однако в некоторых проектах могут предпочесть висячий слеш. Придерживайтесь документации тех API, с которыми будете работать.

-  Дефисы вместо пробелов.

В URL не должно быть пробелов, слитного написания и нижних подчёркиваний. Слова разделяются дефисами.

# ресурс, состоящий из нескольких слов, правильно писать так
/users/{user-id}/user-devices

# нижние подчёркивания не принято использовать
/users/{user-id}/user_devices

# слитное написание также не подойдёт
/users/{user-id}/userDevices

-  Не включать в название ресурса имя HTTP-метода.

API достаточно HTTP-метода, чтобы понять, какие действия от него требуются. Дублировать указание на метод в имени ресурса не нужно.

# Так делать не надо:
GET /get-users
POST /create-user

# Вместо этого
GET /users/{id} # запрос пользователя
POST /users/ # создание пользователя
DELETE /users/{id} # удаление пользователя
