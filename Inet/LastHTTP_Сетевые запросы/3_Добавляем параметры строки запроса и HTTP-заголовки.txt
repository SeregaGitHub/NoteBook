
              Добавляем параметры строки запроса и HTTP-заголовки

  В этом уроке расскажем о том, как добавить в код клиента параметры строки запроса и HTTP-заголовки.

                            Параметры строки запроса

  Для передачи данных на сервер используется не только тело запроса.
Есть ещё один механизм — строка запроса (англ. query string).
Это дополнительный компонент URL-адреса, позволяющий указать список параметров и их значений.
Параметры помогают серверу понять, какие данные нужны клиенту.
  Строка запроса находится в конце URL и отделяется от пути знаком вопроса (?).
После него можно указать пары в формате параметр=значение.
Они отделяются друг от друга символом &:

          http://todo-app.ru/tasks?tags=home&status=done

          http://todo-app.ru     -  базовый путь
          tasks                  -  путь
          tags=home&status=done  -  строка запроса
          tags=home              -  параметр строки запроса
          status=done            -  параметр строки запроса

    В приведённом примере в URL-адресе указаны два параметра строки запроса:

      параметр tags со значением home;
      параметр status со значением done.

      По этим параметрам сервер веб-приложения todo-app, обрабатывающий запрос
    к пути /tasks, понимает следующее: клиент хочет получить список выполненных задач (status=done),
    у которых установлен тег home (tags=home).

                                Кодирование URL

  Согласно спецификации URL, адрес может содержать только латинские буквы,
цифры и отдельные знаки пунктуации. Все недопустимые символы в значениях параметров
должны быть преобразованы и записаны в специальном формате.
Для этого используется процентное кодирование (англ. percent-encoding)
или URL-кодирование (англ. URL-encoding).
  В процессе URL-кодирования все небезопасные символы заменяются на знак процента %,
за которым следуют две шестнадцатеричные цифры. Например,
каждый пробел заменяется на последовательность %20,
а открывающая и закрывающая круглые скобки ( ) — на %28 и %29 соответственно.


  Для того чтобы указать параметры запроса в коде, не потребуются новые классы или методы.
Достаточно добавить строку запроса к строке URL-адреса.
  В качестве примера мы воспользуемся сервисом agify.io.
Он предоставляет простой API для предсказания возраста реального человека или персонажа
по переданному имени. Параметр запроса будет один — name.

public class Practicum {

    public static void main(String[] args) {
        HttpClient client = HttpClient.newHttpClient();

        // делаем запрос с параметром name
        URI url = URI.create("https://api.agify.io/?name=Pixel");
        HttpRequest request = HttpRequest.newBuilder().uri(url).GET().build();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            System.out.println("Код состояния: " + response.statusCode());
            // в ответе будет содержаться предсказанный сервисом возраст
            System.out.println("Ответ: " + response.body());
        } catch (IOException | InterruptedException e) { // обрабатываем ошибки отправки запроса
            System.out.println("Во время выполнения запроса ресурса по url-адресу: '" + url + "', возникла ошибка.\n" +
                    "Проверьте, пожалуйста, адрес и повторите попытку.");
        }
    }
}

  Добавим заголовки запроса в код. Для этого потребуется помощь билдера.
У него есть параметр header(String name, String value), принимающий название заголовка и его значение.
Укажем в коде клиента заголовок Accept. Он сообщает серверу формат ответа, который клиент готов получить.
Например, чтобы получить ответ в формате JSON,
в качестве значения заголовка Accept нужно указать application/json.

public class Practicum {

    public static void main(String[] args) {
        HttpClient client = HttpClient.newHttpClient();

        // получаем ответ в формате JSON с помощью заголовка
        URI url = URI.create("https://api.partner.market.yandex.ru/v2/regions");
        // сообщаем серверу, что готовы принять ответ в формате JSON
        HttpRequest request = HttpRequest.newBuilder()
                .uri(url)
                .header("Accept", "application/json")
                .GET()
                .build();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println("Код состояния: " + response.statusCode());
            System.out.println("Ответ в формате JSON: " + response.body());
        } catch (IOException | InterruptedException e) { // обрабатываем ошибки отправки запроса
            System.out.println("Во время выполнения запроса ресурса по URL-адресу: '" + url + "', возникла ошибка.\n" +
                    "Проверьте, пожалуйста, адрес и повторите попытку.");
        }
    }
}
