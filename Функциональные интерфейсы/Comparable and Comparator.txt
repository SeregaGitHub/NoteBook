
                                            Comparable

package base;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String[] args) {

        List<Employee> employeeList = new ArrayList<>();

        Employee employee1 = new Employee(100, "Anatoliy", "Zorin", 57000);
        Employee employee2 = new Employee(15, "Sergei", "Ivanin", 53000);
        Employee employee3 = new Employee(200, "Sergei", "Anisimov", 59000);
        employeeList.add(employee1);
        employeeList.add(employee2);
        employeeList.add(employee3);
        System.out.println(employeeList);
        Collections.sort(employeeList);
        System.out.println(employeeList);
    }
}

class Employee implements Comparable<Employee>{
    int id;
    String name;
    String surname;
    double salary;

    public Employee(int id, String name, String surname, double salary) {
        this.id = id;
        this.name = name;
        this.surname = surname;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", surname='" + surname + '\'' +
                ", salary=" + salary +
                '}';
    }

    @Override
    public int compareTo(Employee employee) {
        // return this.id - employee.id;                  Если int.
        // return this.name.compareTo(employee.name);  // Integer - так же !!!
        int result = this.name.compareTo(employee.name);
        if (result == 0) {
            result = this.surname.compareTo(employee.surname);
        }
        return result;
    }
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    compareTo ВСЕГДА должен быть одинаково переопределён с equals и hashCode !!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

==============================================================================================

                                      Comparator

package base;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Main {
    public static void main(String[] args) {
      List<Employee> employeeList = new ArrayList<>();

      Employee employee1 = new Employee(100, "Anatoliy", "Zorin", 57000);
      Employee employee2 = new Employee(15, "Sergei", "Ivanin", 53000);
      Employee employee3 = new Employee(200, "Sergei", "Anisimov", 59000);
      employeeList.add(employee1);
      employeeList.add(employee2);
      employeeList.add(employee3);
      System.out.println(employeeList);

      Collections.sort(employeeList, new IdCompEmployee());
      System.out.println(employeeList);
      System.out.println("-----------------------------------------------------------------");

      Collections.sort(employeeList, new NameCompEmployee());
      System.out.println(employeeList);
      System.out.println("-----------------------------------------------------------------");

      Collections.sort(employeeList, new ReversNameCompEmployee());
      System.out.println(employeeList);
      System.out.println("-----------------------------------------------------------------");



      System.out.println("--------------Comparator.comparingInt()--------------");
      for (Student s: students ) {
      System.out.println(s);
      }
      System.out.println("--------------Comparator.comparingInt()--------------");

      students.sort(Comparator.comparingInt(Student::getCourse));

      for (Student s: students ) {
      System.out.println(s);
      }
      System.out.println("--------------Comparator.comparingInt()--------------");

      Collections.sort(employeeList, Comparator.comparingDouble(value -> value.salary));
        Collections.reverse(employeeList);
        System.out.println(employeeList);
        System.out.println("-----------------------------------------------------------------");

        Collections.sort(employeeList, Comparator.comparing(element -> element.salary));
        System.out.println(employeeList);
        System.out.println("-----------------------------------------------------------------");

        /*Comparator<Employee> employeeComparator = new Comparator<Employee>() {
            @Override
            public int compare(Employee emp1, Employee emp2) {
                return emp1.surname.compareTo(emp2.surname);
            }
        };
        Collections.sort(employeeList, employeeComparator);*/

        Collections.sort(employeeList, Comparator.comparing(employee -> employee.surname));

        System.out.println(employeeList);

    }
}

class Employee {
    int id;
    String name;
    String surname;
    double salary;

public Employee(int id, String name, String surname, double salary) {
    this.id = id;
    this.name = name;
    this.surname = surname;
    this.salary = salary;
}

@Override
    public String toString() {
      return "Employee{" +
        "id=" + id +
        ", name='" + name + '\'' +
        ", surname='" + surname + '\'' +
        ", salary=" + salary +
        '}';
    }

}

class IdCompEmployee implements Comparator<Employee> {

  @Override
  public int compare(Employee emp1, Employee emp2) {
    return emp1.id - emp2.id;
  }
}

class NameCompEmployee implements Comparator<Employee> {

  @Override
public int compare(Employee emp1, Employee emp2) {
    return emp1.name.compareTo(emp2.name);
  }
}

class SalaryCompEmployee implements Comparator<Employee> {

  @Override
  public int compare(Employee emp1, Employee emp2) {
    if (emp1.salary == emp2.salary) {
      return 0;
    }
    else if (emp1.salary < emp2.salary) {
      return -1;
    } else {
      return 1;
    }
  }
}

class ReversNameCompEmployee implements Comparator<Employee> {

    @Override
    public int compare(Employee emp1, Employee emp2) {
        return emp2.name.compareTo(emp1.name);
   }
}

=================================================================================
Comparator<Task> comparator = (t1, t2) -> {
    if (t1.getStartTime() == null && t2.getStartTime() != null) {
        return 1;
    } else if (t2.getStartTime() == null && t1.getStartTime() != null) {
        return -1;
    } else if (t1.getStartTime() != null && t2.getStartTime() != null) {
        return t1.getStartTime().compareTo(t2.getStartTime());
    } else {
        return t1.getId() - t2.getId();
    }
};
=================================================================================


              (Если используется один раз, не обязательно создавать класс.
                      Можно использовать анонимный класс или лямбду)

----------------------------------------------------------------------------------------------
- String.CASE_INSENSITIVE_ORDER.compare(item1.name, item2.name);
  (Для лексикографической сортировки слов без учёта регистра)

  ArrayList<String> myArray = new ArrayList<>();
  myArray.sort(String.CASE_INSENSITIVE_ORDER);
==============================================================================================

                            Совмещение Comparable и Comparator
    По умолчанию сортируется по Comparable, если добавить второй параметр - то по Comparator

    package base;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.List;

    public class Main {
        public static void main(String[] args) {
            List<Employee> employeeList = new ArrayList<>();

            Employee employee1 = new Employee(100, "Anatoliy", "Zorin", 57000);
            Employee employee2 = new Employee(15, "Sergei", "Ivanin", 53000);
            Employee employee3 = new Employee(200, "Sergei", "Anisimov", 59000);
            employeeList.add(employee1);
            employeeList.add(employee2);
            employeeList.add(employee3);
            System.out.println(employeeList);
            Collections.sort(employeeList, new IdCompEmployee());
            System.out.println(employeeList);
            Collections.sort(employeeList, new NameCompEmployee());
            System.out.println(employeeList);
            Collections.sort(employeeList, new SalaryCompEmployee());
            System.out.println(employeeList);

            Collections.reverse(employeeList);
            System.out.println(employeeList);

            Collections.sort(employeeList);
            System.out.println(employeeList);
        }
    }

    class Employee implements Comparable<Employee>{
        int id;
        String name;
        String surname;
        double salary;

        public Employee(int id, String name, String surname, double salary) {
            this.id = id;
            this.name = name;
            this.surname = surname;
            this.salary = salary;
        }

        @Override
        public String toString() {
            return "Employee{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", surname='" + surname + '\'' +
                    ", salary=" + salary +
                    '}';
        }

        @Override
        public int compareTo(Employee employee) {
            return this.id - employee.id;
        }
    }
    class IdCompEmployee implements Comparator<Employee> {

        @Override
        public int compare(Employee emp1, Employee emp2) {
            return emp1.id - emp2.id;
        }
    }

    class NameCompEmployee implements Comparator<Employee> {

        @Override
        public int compare(Employee emp1, Employee emp2) {
            return emp1.name.compareTo(emp2.name);
        }
    }

    class SalaryCompEmployee implements Comparator<Employee> {

        @Override
        public int compare(Employee emp1, Employee emp2) {
            if (emp1.salary == emp2.salary) {
                return 0;
            }
            else if (emp1.salary < emp2.salary) {
                return -1;
            } else {
                return 1;
            }
        }
    }
