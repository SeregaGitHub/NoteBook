
                              1. Создаём HTTP-клиент

  Вы уже знакомы с протоколом HTTP и клиент-серверным взаимодействием и даже создали свой HTTP-сервер.
Пришло время побывать на клиентской стороне. В этом уроке покажем, как написать программу — HTTP-клиент.
В качестве примера мы будем работать с сайтом Википедии — https://ru.wikipedia.org/wiki/Список_кодов_состояния_HTTP.
Эта страница содержит информацию о кодах ответа в протоколе HTTP.
Если перейти на указанную страницу, произойдёт следующее:

  -  Браузер отправит запрос на получение страницы HTTP-серверу сайта.
  -  HTTP-сервер обработает запрос, сформирует ответ и вернёт браузеру.
  -  Браузер обработает полученный ответ и отобразит переданную сервером страницу сайта.

  Отправлять запросы и обрабатывать ответы умеют не только браузеры.
Вы можете написать на Java свою программу, которая будет взаимодействовать с HTTP-серверами.
Чтобы сделать это, понадобятся вспомогательные классы:

- Класс java.net.URI. Он описывает адрес интересующего ресурса.

  Несколько классов из пакета java.net.http:

- HttpRequest
        Описывает HTTP-запрос к серверу.
        Экземпляры этого класса создаёт разработчик программы HTTP-клиента.

- HttpResponse
        Описывает HTTP-ответ сервера.
        Экземпляры этого класса возвращаются в ответ на отправленные программой запросы.

- HttpClient
        Реализует коммуникацию с сервером по протоколу HTTP.
        Отправляет запросы, описанные разработчиком в виде экземпляров HttpRequest,
        а также получает ответы и преобразует их в экземпляры HttpResponse.

======================================================================================================================

- Описываем адрес ресурса с помощью URI

  Сначала необходимо создать экземпляр класса URI.
Для этого можно воспользоваться одним из его конструкторов,
а также удобным статическим методом create(String).
Метод принимает адрес в виде строки и конструирует URI-объект.
При этом проверяется соответствие строки формату URI.

// создаём экземпляр URI, содержащий адрес нужного ресурса
URI uri = URI.create("https://ru.wikipedia.org/wiki/Список_кодов_состояния_HTTP");

- Описываем запрос с помощью HttpRequest

  Можно приступить к описанию запроса и создать экземпляр класса HttpRequest.
Элементов много и не все они обязательны. Перечислять их для передачи в метод или конструктор сложно.
Поэтому можно воспользоваться билдером. Сначала нужно получить экземпляр билдера.
Затем при помощи его методов задать нужные элементы запроса.
А в конце вызвать метод build(), конструирующий итоговый объект по указанным параметрам.

// создаём экземпляр URI, содержащий адрес нужного ресурса
URI uri = URI.create("https://ru.wikipedia.org/wiki/Список_кодов_состояния_HTTP");

// получаем экземпляр класса-строителя
HttpRequest.Builder requestBuilder = HttpRequest.newBuilder();

// создаём объект, описывающий HTTP-запрос
HttpRequest request = requestBuilder
        .GET()    // указываем HTTP-метод запроса
        .uri(uri) // указываем адрес ресурса
        .version(HttpClient.Version.HTTP_1_1) // указываем версию протокола HTTP
        .header("Accept", "text/html") // указываем заголовок Accept
        .build(); // заканчиваем настройку и создаём ("строим") HTTP-запрос

- Создаём HTTP-клиент с помощью HttpClient

Для создания экземпляра HttpClient тоже можно использовать билдер.

HttpClient client = HttpClient.newBuilder() // получаем экземпляр билдера
        .connectTimeout(Duration.ofSeconds(5)) // указываем максимальное время ожидания соединения с сервером
        .build(); // заканчиваем настройку и создаём ("строим") HTTP-клиент

  Однако чаще всего настраивать отдельные параметры HTTP-клиента нет необходимости,
ведь значения по умолчанию подходят для большинства ситуаций.
Статический метод newHttpClient() возвращает HTTP-клиент с настройками по умолчанию.

// HTTP-клиент с настройками по умолчанию
HttpClient client = HttpClient.newHttpClient();

======================================================================================================================

  Чтобы отправить запрос, понадобится метод send. Рассмотрим его контракт:

            <T> HttpResponse<T> send(
                    HttpRequest,
                    HttpResponse.BodyHandler<T>
            )    trows     IOException, InterruptedException

Разберём элементы этого контракта:

- <T>

     Параметр типа, указывающий на то, что send — обобщённый метод.

- HttpResponse<T>

    Возвращаемое значение. Описывает HTTP-ответ: код состояния, заголовки, тело.
    Часто в теле ответа сервер отправляет какие-либо данные.
    Это могут быть обычный текст, HTML-код, JSON-документ и так далее.
    HttpResponse содержит параметр типа T. Впоследствии он заменяется на класс,
    который представляет в языке Java содержимое тела конкретного HTTP-ответа.

- HttpRequest

    Класс, описывающий запрос, который необходимо отправить.

- HttpResponse.BodyHandler<T> (BodyHandler: от англ. body — «тело» и handler — «обработчик»)

    Интерфейс, который помогает HTTP-клиенту преобразовать тело ответа из набора байтов в Java-объект.
    В языке Java имеются готовые реализации этого интерфейса.
    Они доступны в классе HttpResponse.BodyHandlers.
    Например, HttpResponse.BodyHandlers.ofString() возвращает обработчик,
    позволяющий преобразовать тело ответа из набора байтов в строку.

- IOException, InterruptedException

    Список исключений, которые могут возникнуть в результате отправки запроса или обработки ответа.

------------------------------------------------------------------------------------------------------------

  В примере ниже сначала используется статический метод ofString() класса HttpResponse.BodyHandlers.
С помощью него можно получить стандартный обработчик, конвертирующий тело ответа в строку.
Затем отправляется запрос.

    // получаем стандартный обработчик тела ответа с конвертацией содержимого в строку
    HttpResponse.BodyHandler<String> handler = HttpResponse.BodyHandlers.ofString();

    // отправляем запрос и получаем ответ от сервера
    HttpResponse<String> response = client.send(request, handler);

  Метод send возвращает объект, описывающий HTTP-ответ.
Этот объект содержит тело ответа в виде строки и код состояния,
а также дополнительную информацию, которую присылает сервер.

  Получить тело и код ответа можно при помощи методов body() и statusCode(). Выведем их на консоль.

// выводим код состояния и тело ответа
System.out.println("Код ответа: " + response.statusCode());
System.out.println("Тело ответа: " + response.body());

  Если собрать все части кода, он будет выглядеть так:

  public class Practicum {

      public static void main(String[] args) throws IOException, InterruptedException {
          // создаём экземпляр URI, содержащий адрес нужного ресурса
          URI uri = URI.create("https://ru.wikipedia.org/wiki/Список_кодов_состояния_HTTP");

          // создаём объект, описывающий HTTP-запрос
          HttpRequest request = HttpRequest.newBuilder() // получаем экземпляр билдера
                  .GET()    // указываем HTTP-метод запроса
                  .uri(uri) // указываем адрес ресурса
                  .version(HttpClient.Version.HTTP_1_1) // указываем версию протокола
                  .header("Accept", "text/html") // указываем заголовок Accept
                  .build(); // заканчиваем настройку и создаём ("строим") http-запрос

          // HTTP-клиент с настройками по умолчанию
          HttpClient client = HttpClient.newHttpClient();

          // получаем стандартный обработчик тела запроса с конвертацией содержимого в строку
          HttpResponse.BodyHandler<String> handler = HttpResponse.BodyHandlers.ofString();

          // отправляем запрос и получаем ответ от сервера
          HttpResponse<String> response = client.send(request, handler);

          // выводим код состояния и тело ответа
          System.out.println("Код ответа: " + response.statusCode());
          System.out.println("Тело ответа: " + response.body());
      }
  }
