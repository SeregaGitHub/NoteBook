                                    Необязательные и циклические зависимости

  Иногда возникают ситуации, когда при внедрении зависимости требуется обозначить в коде, что она необязательна,
или связь между классами циклическая — класс Chicken зависит от класса Egg, а Egg, в свою очередь, зависит от Chicken.
Разберём, как действовать в таких случаях.

                                          Необязательные зависимости

  По умолчанию все зависимости являются обязательными. Это можно увидеть, заглянув в класс @Autowired (CTRL + клик на класс в IDEA).

public @interface Autowired {
    boolean required() default true; //  required с англ. требуемый
}

  Однако может возникнуть потребность обозначить в коде, что отсутствие зависимости не нарушает работу программы.
То есть зависимость является необязательной.
  Допустим, у класса MyCar две зависимости — Engine (двигатель) и SeatHeater (подогрев сидений).
Без двигателя машина не поедет, а вот без подогрева сидений вполне сможет обойтись.
Чтобы отразить в коде, что зависимость необязательна, нужно добавить к аннотации @Autowired параметр (required = false).
При внедрении через конструктор код получится таким.

@Component
public class MyCar {
    private final Engine engine;
    private final SeatHeater seatHeater;

    @Autowired // добавляем зависимости через конструктор
    public MyCar(
            Engine engine,
            // указываем, что одна из зависимостей необязательна
            @Autowired(required = false) SeatHeater seatHeater
    ) {
        this.engine = engine;
        this.seatHeater = seatHeater;
    }

    public void start() {
        engine.start();
        if (seatHeater != null) {
            seatHeater.start();
        }
    }
}

  Если Spring не сможет найти объект класса SeatHeater, то передаст null.
Также обратите внимание, что в метод start() добавлена проверка seatHeater != null.
Без неё может возникнуть ошибка во время исполнения программы.

                                        Циклические зависимости

  Циклическая зависимость получается тогда, когда классы зависят одновременно друг от друга. К примеру, возьмём проблему курицы и яйца.

  @Component                             @Component
  public class Chicken {                 public class Egg {                          public class Main {
      private final Egg egg;                 private final Chicken chicken;               public static void main(String[] args) {

      @Autowired                             @Autowired                                       SpringApplication.run(Main.class, args);
      public Chicken(Egg egg) {              public Egg(Chicken сhicken) {                }
          this.egg = egg;                         this.сhicken = сhicken;            }
      }                                      }
  }                                      }

  Если попробовать запустить такую программу, то Spring выдаст ошибку.

  BeanCurrentlyInCreationException:
    Error creating bean with name 'сhicken':
      Requested bean is currently in creation:
        Is there an unresolvable circular reference?

  Что происходит при циклической зависимости:

-  Spring пытается создать объект класса Chicken и обнаруживает, что у него есть зависимость Egg;
-  Spring начинает создавать бин класса Egg, чтобы потом передать его в Chicken, и находит, что у класса Egg есть зависимость типа Chicken;
-  Spring начинает создавать бин класса Chicken, чтобы передать его в Egg;
-  Spring понимает, что бин Chicken уже находится в процессе создания, и выдаёт ошибку — «совершена попытка создать бин, когда он в процессе создания».


  Можно попробовать обойти такую ошибку с помощью методов-сеттеров.

  @Component                                 @Component                                           @SpringBootApplication
  public class Chicken {                     public class Egg {                                   public class Main {
      private Egg egg;                           private Chicken сhicken;                             public static void main(String[] args) {

      @Autowired                                 @Autowired
      public void setEgg(Egg egg) {              public void setChicken(Chicken сhicken) {                SpringApplication.run(Main.class, args);
          this.egg = egg;                            this.сhicken = сhicken;                          }
      }                                          }                                                }
  }                                          }

  В таком случае Spring создаёт бины взаимозависимых классов с помощью конструктора по умолчанию (без параметров), а потом уже передаёт их в оба сеттера. То есть происходит следующее:

-  Spring создаёт объект класса Chicken, добавляет в контекст;
-  Spring создаёт бин класса Egg, добавляет в контекст;
-  Spring вызывает chicken.setEgg(egg), чтобы передать первую зависимость;
-  Spring вызывает egg.setChicken(chicken), чтобы передать вторую зависимость.

  Шаги 3 и 4 могут быть вызваны в любом порядке, и с этим стоит быть осторожным.
Когда вызывается первый из сеттеров, второй ещё не вызван, и одно из полей может оказаться null.
Поэтому действует правило: в @Autowired-сеттерах не стоит вызывать методы переданной зависимости,
так как она может в тот момент ещё оставаться пустой.

  Даже с внедрением через сеттеры программа может не запуститься.
Spring увидит циклическую зависимость и уронит программу с просьбой либо убрать её, либо явно разрешить в настройках.
Сообщение при этом будет следующим: «Полагаться на циклические ссылки не рекомендуется, по умолчанию они запрещены.
Обновите своё приложение, чтобы устранить цикл зависимостей между бинами.
В крайнем случае можно разорвать цикл автоматически, установив spring.main.allow-circular-references в true».

  Обычно наличие циклических зависимостей означает, что программа спроектирована не лучшим образом.
В большинстве случаев в такой ситуации требуется рефакторинг, а не внедрение зависимостей через методы-сеттеры.
К примеру, вынести часть логики в дополнительный класс либо перенести часть методов из одного класса в другой.
