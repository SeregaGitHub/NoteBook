  Склонируйте репозиторий https://github.com/PraktikumJava/m2-t1-maven.git, затем в окне IDEA выберите Open Project.
В диалоге открытия найдите папку m2-t1-maven и выберите файл pom.xml. У вас должен открыться тестовый проект.

В файл pom.xml уже добавлен плагин-тестировщик maven-surefire. Можно сразу при открытии проекта увидеть цель этого плагина — surefire:test.

Однако тестовый фреймворк не подключён. Исправьте это. Добавьте зависимости для JUnit5 в блок <dependencies>.

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.7.2</version>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.7.2</version>
    <scope>test</scope>
</dependency>

  Все теги вам уже знакомы, включая параметр <scope>test</scope> — он указывает, что подключаемая зависимость нужна только на этапе тестирования.
После добавления зависимости не забудьте синхронизировать проект.
Теперь перейдите в пункт test меню Lifecycles на панели инструментов Maven и запустите тесты на выполнение.
Вы сможете увидеть общее число запущенных тестов — англ. Tests run, количество непройденных тестов —англ. Failures,
число тестов с ошибками — англ. Errors и количество тестов, которые были проигнорированы — англ. Skipped.

  Если вы установили Maven отдельной утилитой, то управление сборкой будет происходить из консоли.
Используйте для этого такие команды, как mvn test, mvn clean и другие.
После запуска тестов в директории target появилось несколько дополнительных папок, таких как generated-sources, generated-test-sources,
maven-status и других. Их можно удалить. Запустите цикл clean из панели инструментов Maven. Проверьте результат — директория target очищена.

  Тесты — это необходимая вещь в каждом проекте. Но когда в проекте скапливается значительное количество тестов,
результат выполнения каждого из них трудно отслеживать вручную.
Поможет плагин surefire-report — он анализирует выполнение тестов и выдаёт результат тестирования в удобном для анализа формате.
Добавьте этот плагин в блок <build> <plugins>.

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-report-plugin</artifactId>
    <version>2.22.2</version>
</plugin>

  Так как surefire-report — нестандартный плагин, его нет в стартовом наборе фаз сборки.
Поэтому перейдите в меню Execute Maven Goal и запустите surefire-report:report.
В этой команде surefire-report это название плагина, а report это цель. После успешного завершения работы плагина
вы сможете найти отчёт о работе тестов в папке target/site.

-----------------------------------------------------------------------------------------------------------------------------

                                                    Задание в IDE

  Выполнение некоторых команд Maven требует, чтобы весь жизненный цикл сборки прошёл без ошибок.
К таким командам относятся mvn package и mvn install. Сейчас один из тестов не проходит — testSale20Price10000().
В нём совершена довольно типичная ошибка для программирования — ошибка из-за копипаста (англ. copy-paste).
Эта ошибка происходит, когда какой-то код копируется и не всё в нём адаптируется под новый контекст выполнения.
В данном случае вместо вызова метода makeNewSale() остался вызов makeNewDiscount().

  Исправьте тест testSale20Price10000(), чтобы его выполнение было успешным. После этого запустите команду mvn package любым способом.
После корректного завершения всех тестов и выполнения команды mvn package в директории target появится собранный для Java артефакт
— discount-1.0-SNAPSHOT.jar. Его можно использовать в дальнейшем. Если вы запустите команду mvn install,
то она поместит этот артефакт в локальный репозиторий — в папку .m2 по пути repository/ru/yandex/practicum/discount/1.0-SNAPSHOT/.
