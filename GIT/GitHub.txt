
                     ~/.gitconfig

[user]
	name = Serega Kraev
	email = serega-rambler@rambler.ru

[user]
	name = Sergei Kraev
	email = serega.kraev1@yandex.ru

---------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=gzFbt7GVRKU


Create a new repository                       -  На сайте GitHub: создать новый репозиторий
---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---

                            HTTPS


create a new repository on the command line   -  в терминале

echo "# NoteBookAtomRep" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Serega-GitHub/NoteBookAtomRep.git
git push -u origin main

…or push an existing repository from the command line (Если репозиторий уже есть на локаном компе !!!):

git remote add origin https://github.com/Serega-GitHub/NoteBookAtomRep.git
git remote    // origin
  (Добавить файлы в репозиторий:)
git branch -M main
git push -u origin main

    Если нужно скачать чей-то репозиторий !!!
На сайте GitHub:  Download ZIP
    или
В терминале:  git clone https://github.com/Serega-GitHub/NoteBookAtomRep.git


  Скачать файлы из репозитория:
Первый раз клонировать, затем:
git pull

------------------------------------------------------------------------------------------------------------

                          SSH

git remote add origin git@github.com:SeregaGitHub/first-project.git
git branch -M main
git push -u origin main

---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---

git remote add origin git@github.com:SeregaGitHub/first-project.git

# переход в домашнюю директорию:
cd ~

# вывести список созданных ключей:
ls -la .ssh/

# для более структурированного вывода вы можете добавить команде пару параметров:
ls -lAFho .ssh/

Если папка пустая или её нет, то всё хорошо.
Если есть с похожим названием, SSH-ключи уже создавались:

    id_dsa.pub
    id_ecdsa.pub
    id_ed25519.pub
    id_rsa.pub

Если вы не создавали их, удалите все эти файлы.

Генерация SSH-ключа

1.Сгенерируйте в терминале приватный и публичный ключи. У публичного расширение .pub, у приватного расширения нет.
Оба ключа сохранятся на вашем компьютере. Публичный нужен для привязки к Git.
В строке e-mail обязательно укажите адрес почты, которая привязана к GitHub:

    ssh-keygen -t ed25519 -C "practicum.student@yandex.ru"


Если у вас появилось сообщение об ошибке, скорее всего ваша система не поддерживает алгоритм шифрования ed25519.
Всё нормально, в таком случае достаточно воспользоваться другим алгоритмом:

    ssh-keygen -t rsa -b 4096 -C "practicum.student@yandex.ru"


После ввода отобразится сообщение:

    > Generating public/private rsa key pair.


2.Укажите место хранения ключей. Простой вариант — сделать домашний каталог пользователя путём по умолчанию. Для этого нажмите Enter:
macOS

    > Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]


Windows

    > Enter a file in which to save the key (C:\Users\<имя_пользователя>\.ssh\):[Press enter]


Теперь в указанной директории появится пара ключей.
3.Создайте пароль доступа к SSH-ключу. Его нужно вводить при каждом соединении через протокол. Поэтому запомните его или запишите:

    > Enter passphrase (empty for no passphrase): [Type a passphrase]
    > Enter same passphrase again: [Type passphrase again]


Но вы можете оставить поле пустым, чтобы никогда не вводить пароль. Для этого нажмите Enter.

4.Запустите фоном команду ssh-agent. Она ищет SSH-ключ на вашем компьютере:

    eval $(ssh-agent -s)


5.Привяжите приватный ключ к ssh-agent. Тогда вы сможете не вводить пароль при каждой работе с репозиторием.
Обратите внимание, что к агенту нужно привязывать именно приватный ключ — это файл без расширения .pub:

    # выбор команды зависит от алгоритма шифрования
    # для ed25519:
    ssh-add ~/.ssh/id_ed25519
    # для rsa:
    ssh-add ~/.ssh/id_rsa

    Привязка SSH-ключа к аккаунту GitHub
    1.Скопируйте публичный ключ в буфер обмена:

    cat ~/.ssh/id_rsa.pub
        или
    cat ~/.ssh/id_ed25519.pub

Перейдите на GitHub и откройте настройки аккаунта: Settings
В левом меню выберите пункт ″SSH and GPG keys″:
В открывшейся вкладке выберите ″New SSH key or Add SSH key″:
В поле ″Title″ напишите заголовок. Например, ″Personal key″.
В поле ″key″ скопируйте ваш ключ из буфера обмена:
Нажмите кнопку ″Add SSH key″:

В терминале:
git branch -M main
git push -u origin main
===========================================================================================================
                              FORK

FORK  -  копирование репозитория в свой аккаунт на github

Зайдите на https://github.com/PraktikumJava/test_homework и нажмите Fork:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                            CLONE

- git clone

  Давайте сымитируем эту ситуацию. На вашей странице GitHub откройте вкладку “Repositories”:
теперь у вас их два: first-project и test_homework. Откройте страницу второго и нажмите зелёную кнопку “Code”:

  Появится окно, из которого вы сможете скопировать адрес репозитория. Он понадобится для клонирования.
Теперь откройте терминал и перейдите в папку, где собираетесь сохранить репозиторий.
Введите команду git clone (англ. «клонировать») и адрес репозитория:

git clone https://github.com/PraktikumJava/test_homework.git   (Через SSH !!!)

# Вам нужно указать адрес своего репозитория.

  Когда закончится клонирование, перейдите внутрь репозитория командой cd, создайте файл Main.java и сделайте коммит.
После коммита отправьте изменения в удалённый репозиторий командой git push -u origin main.

  Затем откройте аккаунт на GitHub, выберите репозиторий test_homework, и вы увидите опубликованный коммит.
В вашем распоряжении теперь есть два способа создания репозитория: создать свой собственный или сделать «форк» от чужого.
Второй способ пригодится вам уже совсем скоро — при сдаче первой домашней работы!

=============================================================================================================

                            Взаимная проверка кода

    Начните с загрузки файла с решением в ваш репозиторий на GitHub. Затем пригласите партнёра по взаимопроверке в приватный репозиторий —
сделать это можно через меню Collaboration (англ. «сотрудничество»).
    Откройте настройки репозитория и введите логин партнёра: Settings → Repositories → Manage access → Invite a collaborator.
Теперь отправьте ссылку на ваше решение
=============================================================================================================

  Для переключения вам понадобятся команды git clone и git remote set-url origin. Когда вы клонируете репозиторий,
вы указываете адрес его удалённого источника — так формируется связь между локальным и удалённым репозиториями.
git remote set-url origin (англ. «установить URL удалённого источника для метки origin»)
меняет эту связь и обновляет URL-адрес удалённого подключения. Команда принимает два параметра:
имя удалённого репозитория (по умолчанию это origin) и новый URL, по которому к нему можно подключиться.
  Например, клонируем репозиторий meow. Ссылка, по которой мы выполнили клонирование, станет исходным значением удалённого репозитория.
Затем заменим удалённый репозиторий на rrrr с помощью git remote set-url origin.

git clone https://github.com/kitty/meow.git
cd meow
git remote -v # покажет текущий URL
git remote set-url origin https://github.com/kitty/rrrr.git
git remote -v # URL изменился

Готово! Адрес удалённого репозитория изменён. Теперь с ним можно работать.
Механизм замены URL пригодится не только чтобы имитировать командную разработку в наших уроках. Он нужен и в реальных ситуациях.
Например, при миграции удалённого репозитория на другой адрес
(из GitHub в GitLab или в приватный репозиторий компании, а также при создании форков и передаче авторства другому человеку).
В этом случае можно применить git remote set-url origin и поменять URL удалённого источника — загружать репозиторий заново не понадобится.

=============================================================================================================

- git fetch  -  собирает все коммиты, которых нет в текущей ветке, из целевой ветки и сохраняет их в локальном репозитории.
                При этом они не добавляются в текущую ветку
                В отличие от git fetch, git pull загружает содержимое удалённого репозитория в локальный и сразу создаёт коммит слияния.
                Можно сказать, что git pull — это комбинация команд git fetch и git merge.

  Если в локальном репозитории сделаны изменения и надо подтянуть изменения из удалённого:

                Сначала стабилизируйте состояние локального репозитория — спрячьте изменения в нём.
                Когда незавершённые изменения больше не будут мешать, примите изменения из входящего коммита.
                После того как входящий коммит будет принят, верните наработки из хранилища.

                $ git stash
                $ git pull
                $ git stash pop

  Если необходимо скачать отдельный файл с GitHub:

В репозитории открыть файл -> нажать кнопку Raw -> пкм -> Сохранить как...

=============================================================================================================

  Репозиторий приватный. Если нужно сделать его публичным. Для этого перейдите в репозиторий и откройте его настройки (Settings).
В самом низу страницы будет раздел Danger Zone:

  Для того, чтобы сделать репозиторий публичным, в появившемся окне нажмите кнопку Change visibility,
выберите пункт Make public и для подтверждения введите имя репозитория (или пароль своего GitHub).
