
                                              Режим доступа и уровень изоляции

  Первое важное свойство транзакции — режим доступа (англ. access mode). Режимы доступа бывают следующие:

- READ WRITE (англ. «чтение и запись») — значение по умолчанию. В этом режиме возможно выполнение всех команд.
- READ ONLY (англ. «только чтение») — в этом режиме выполнение команд INSERT, UPDATE, DELETE, CREATE и других будет запрещено.

----------------------------------------------------------------------------------------------------------------------------------------------------------

    Уровень изоляции (англ. isolation level) определяет, какие данные транзакция может видеть в процессе выполнения параллельной транзакции.

                                                    Уровни бывают такие:

-   READ COMMITTED (англ. «чтение фиксированных данных») — уровень по умолчанию для PostgreSQL.
  В текущей транзакции будут видны только те строки, которые были зафиксированы до начала её выполнения.

-   REPEATABLE READ (англ. «повторяющееся чтение») — читающая транзакция не увидит изменений данных,
  которые были прочитаны ею ранее.

-   SERIALIZABLE (англ. «сохраняемые») — высший уровень изоляции.
  Транзакции полностью изолируются друг от друга — каждая будет выполняться так, как будто параллельных транзакций не существует.

-   READ UNCOMMITTED (англ. «чтение нефиксированных данных») — низший уровень изоляции.
  Если несколько параллельных транзакций попытаются изменить одну и ту же строку таблицы,
  в окончательном варианте строка будет иметь то значение, которое определено всем набором успешно выполненных транзакций.
  В PostgreSQL этот уровень не реализован.

    От выбора уровня изоляции зависит многое. Если выбрать самый строгий, приложение будет работать медленно,
потому что все параллельные транзакции будут выполняться последовательно. То есть пока не выполнится запрос первого пользователя,
запрос второго выполняться не будет. Такой уровень используется редко.
Зато на нём не возникает проблем, связанных с реализацией параллельных транзакций.
  Об этих проблемах расскажем ниже.

  Почти во всех базах данных по умолчанию установлен менее строгий уровень.
На нём применяются менее строгие настройки, которые позволяют достичь компромисса —
сохранить производительность программы и в то же время предотвратить возможные проблемы использования параллельных транзакций.
  Установить свойства текущей транзакции, то есть режим доступа и уровень изоляции, можно с помощью команды SET TRANSACTION.
Обратите внимание: на последующие транзакции она не влияет.

-  SET TRANSACTION ISOLATION LEVEL SERIALIZABLE READ WRITE;

  В примере для текущей транзакции задан режим доступа «чтение и запись» и уровень изоляции SERIALIZABLE.
Более детально о команде SET TRANSACTION вы можете прочитать в документации.

https://postgrespro.ru/docs/postgrespro/12/sql-set-transaction

=======================================================================================================================================================

                                            Проблемы выполнения параллельных транзакций

  Разберём некоторые из проблем, которые возникают в процессе реализации параллельных транзакций.
Они могут повлиять на результат выполнения десятков запросов в программе, поэтому так важно учитывать их в работе со Spring.

  Выделяют несколько классов возможных проблем:

-   «Грязное» чтение (англ. dirty reads) — в результатах запроса появляются промежуточные результаты параллельной транзакции,
  которая ещё не завершилась.

-   Фантомное чтение (англ. phantom reads) — в результатах повторяющегося запроса появляются и исчезают строки,
  которые в данный момент модифицирует параллельная транзакция.

-   Неповторяющееся чтение (англ. non-repeatable reads) — запрос с одними и теми же условиями
  даёт неодинаковые результаты в рамках транзакции.

-   Потерянное обновление (англ. lost update) — две параллельные транзакции меняют одни и те же данные,
  при этом итоговый результат обновления предсказать невозможно.

  С течением времени базы данных научились решать эту проблему, но теоретически она по-прежнему возможна.

----------------------------------------------------------------------------------------------------------------------------------------------------------

                                    Управление уровнем изоляции через аннотацию @Transactional

  Управлять уровнем изоляции в Spring можно через параметр isolation аннотации @Transactional.

  @Transactional(isolation = Isolation.DEFAULT)

  Этому параметру соответствует enum Isolation, который может принимать следующие значения:

-   DEFAULT — значение по умолчанию. Транзакция создаётся с уровнем изоляции, заданным в настройках базы данных.
  Использование этого значения требует контроля, потому что БД может быть настроена не так, как ожидает разработчик.

-   READ_COMMITTED — этот уровень изоляции предотвращает проблему «грязного» чтения.

-   REPEATABLE_READ — этот уровень предотвращает проблему «грязного» и неповторяющегося чтения.

-   SERIALIZABLE — на этом уровне не возникает перечисленных проблем.
  Однако из-за необходимости последовательно выполнять часть параллельных транзакций существенно падает скорость взаимодействия с БД.

-   READ_UNCOMMITTED — соответствует низшему уровню изоляции. На нём возможны все перечисленные проблемы,
  возникающие в работе с параллельными транзакциями.

  https://github.com/praktikum-java/module4_spring_without_boot/tree/transactions
