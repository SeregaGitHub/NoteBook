                                              Start

https://start.spring.io/                                      //  -  инициализатор Spring

<build>
  <plugins>
    <plugin>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-maven-plugin</artifactId>
      <version>2.6.2</version>                                // Если Java 11 - необходимо указать версию 2.6.2 !!!
    </plugin>
  </plugins>
</build>


Spring Initializr сам создал структуру папок Maven-проекта и добавил туда минимально необходимые файлы.

  -  CatsgramApplication.javaв директорииjava— стартовый класс проекта. Внутри него вы найдёте метод main.
    Класс отмечен аннотацией @SpringBootApplication — она показывает фреймворку Spring Boot, что это основной класс с конфигурацией приложения.
  -  CatsgramApplicationTest.java в директории test — заготовка класса для тестов проекта.
  -  application.properties в папке resources —  это файл, в который нужно будет добавлять настройки проекта.
    Это могут быть стандартные настройки Spring Boot, пути к сторонним приложениям, расписание для автоматического выполнения каких-то задач и многое другое.
  -  mvnw и mvnw.cmd — это скрипты плагина Maven Wrapper (англ. «обёртка»).
    Он позволяет запускать приложение или несколько приложений с разными версиями Maven на любом компьютере без предварительной установки и настройки сборщика.
    При запуске скрипт проверяет, установлен ли в системе Maven нужной версии, и если нет,
    то автоматически загружает его, запускает и передаёт ему указанные команды.
    Выбор скрипта зависит от операционной системы: mvnw для Linux и macOS, а mvnw.cmd для Windows.
  -  pom.xml — файл сборки проекта. Он уже включает все необходимые зависимости для запуска и работы веб-приложения на базе Spring Framework.
    Обратите внимание, что ваш проект наследует от spring-boot-starter-parent, который, в свою очередь, наследует от spring-boot-dependencies.
    Последний — это BOM, где декларируются версии для очень большого количества зависимостей.
    Благодаря этому вам не нужно прописывать версии самостоятельно и разруливать проблемы с их несовместимостью.
    Все они уже протестированы на совместимость с используемой вами версией Spring Framework.


  По умолчанию используется встроенный веб-сервер Apache Tomcat. Это эталонная реализация спецификации Java по улучшению и расширению веб-серверов.
Он принимает HTTP-запросы и передаёт их на обработку компонентам Spring Framework, получает от них результат обработки
и возвращает его в качестве ответа HTTP-клиентам.
  Сейчас приложение запущено на порту 8080. Порт можно поменять — это требуется, если он занят.
Перейдите в файл application.properties, добавьте в него настройку server.port=8081 и перезапустите приложение.
Теперь в выводе будет строка Tomcat initialized with port(s): 8081 (http).
  В application.properties можно добавлять и другие настройки. Так же как и в случае с заменой порта, для этого используется формат <ключ>=<значение>.
Полный список настроек можно посмотреть в официальной документации Spring.
https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html
