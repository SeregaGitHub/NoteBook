
githowto.com

git gui  -  скачка графического интерфейса !!!

 -   git config --list   -   просмотр настроек имени, email и color.ui
 -    git config -h      -    просмотр опций команды config
 -   cat ~/.gitconfig
 -   git config --global alias.ch checkout    -    команда git checkout
                                                заменится на git ch
 -   git config alias.c `!git (someCommand_1; git (someCommand_2)`    -
                        git c выполнит две команды  someCommand подряд
      (Либо можно дописать алиас в файл .gitconfig)
        [alias]
	            ch = checkout
------------------------------------------------------------------------
-    rm -rf .git         -  удаление гита из проекта 
------------------------------------------------------------------------
    Перейти в директорию, где будет располагаться проект, и,
  вызвав командную строку, ввести команду
- git init
- git add fileName - проиндексировать (подготовить) файлы к коммиту
- git commit -m 'Ваши коментарии' - закоммитить
  (git commit (без -m)   -   переведёт в текстовый редактор !!!)
- git status - проверка состояния файлов
-------------------------------------------------------------------------
                           ADD
git add file1 file2     - добавить файлы file1, file2
git add .               - добавить все файлы в текущей папке
git add*.java           - добавить все java-файлы в текущей папке
git add someDir/*.java  - добавить все java-файлы в папке someDir
git add someDir/        - добавить все файлы в папке someDir
git add «*.java»        - добавить все java-файлы в проекте
git add -A              - добавить все файлы в проекте

git add -p  myFile      - закоммитить построково (y/n):

                          y – добавить фрагмент в индекс,
                          n – пропустить фрагмент,
                          s – разделить фрагмент на более мелкие части,
                          e – отредактировать фрагмент вручную,
                          q – выйти из режима без дальнейших изменений.

--------------------------------------------------------------------------
                           ОТКАТ
- git reset                   -  отмена файлов add (если он один)
- git reset myFile            -  отмена файлов add (находящихся в индексе)
- git reset HEAD myFile       -  отмена изменений файлов (файл будет
     (git reset --hard)          как в последнем коммите)
- git rm --cached myFile      -  удаляет файл из отслеживаемых
- git checkout 1913 fileName  -  достанет коммит для изменений
                                 (переведёт в индекс и раб дир.)
  если потом git commit       -  эта старая версия станет текущей,
                                 (последней)
-------------------------------------------------------------------------
                         COMMIT
git commit -am `Ваши коментарии`               - коммит минуя add
git commit -m `Ваши коментарии` fileName       - закоммитит только
                                                 один файл fileName
                                                 минуя add
git commit --all `Ваши коментарии`             - закоммитит все файлы
git commit -v                                  - закоммитит и покажет изменения,
                                                 которые есть
                                                 (если не вводить комментарии и
                                                  нажать q коммит отменится !!!)
git commit --amend -m 'Ваши новые коментарии'  -  изменение
                                                  коментариев последнего коммита
git commit --amend                             -  позволит изменить коммит
                                                  и сохранить рядом старый
git commit --amend --no-edit                   -  всё что дописано войдёт в старый
                                                  коммит, без изменения коментариев
                                                  (выполнять после add !!!)

    4594 - HEAD-master                      33fd - HEAD-master
     -                     =>        4594-----
    2fad                                    2fad
- git checkout HEAD fileName  -  Работаем в хорошем файле,
     (git reset --hard)          изменения не понравились, хотим вернуть как было,
                                 даже из add
- git checkout fileName  -  возвращяет файл до сотояния
                            последнего коммита, из раб дир.

git reset --hard HEAD~                   - удалит последний коммит
git reset --hard HEAD~2                  - удалит последнии 2 коммита
-------------------------------------------------------------------------
                       УДАЛЕНИЕ ФАЙЛА
      Вначале удалить файл физически (как обычно)
   gid add fileName
   git commit -m Ваши коментарии   -   (без кавычек, если одно слово !!!)
                              ИЛИ
git rm путь до файла          - удаление файла
git rm -r имя папки           - удаление папки
git rm -r --cached имя папки  - удаление папки только из репозитория
                                (папка станет неотслеживаемой !!!)
git rm -f имя файла           - удаление файла, с изменениями,
                                без сохранения в репозиторий
                     ****************************
git clean               -  удаляет, то что не отслеживается git
git clean -d            -  удаляет не только файлы, но и директории
git clean -dx           -  удаляет в том числе и то что gitignor
git clean -dxf          -  в любом случае ДОБАВЛЯТЬ -f !!!
                           ПЕРЕИМЕНОВАНИЕ ФАЙЛА
      Вначале переименовать файл физически (как обычно)
 если git status - first deleted
                   second Untracked (неотслежаваемый)
 git add .
 если git status  -  first -> second
 git commit -m 'Ваши коментарии'  -  записать изменения в репозиторий
                              ИЛИ
 git mv first second
----------------------------------------------------------------------
git log                            — просмотр истории коммитов
git log --patch или -p             - просмотр вместе с diff !!!
git log --pretty=medium            - стандартный просмотр истории коммитов
git log --oneline                  — компактный просмотр истории коммитов
git log --pretty=oneline           — компактный просмотр истории коммитов
git log --oneline                  - то же, с сокращённым идентификатором
git log master --oneline           — компактный просмотр истории коммитов
                                     только в ветке master
git log master branchName          - просмотр коммитов на двух ветках
git log master branchName --graph  - то же, но более наглядно !!!
git log fileName                   - коммиты только файла fileName
git log -p fileName                - коммиты только файла fileName с отличиями
git log -p --follow fileName       - то же самое, но если файл был переименован
=========================================================================
git log branchName ^master         - коммиты ветки branchName с момента
                                     отхождения от master
         ИЛИ
git log master..branchName         - то же самое !!!
git log ..branchName               - то же самое, если HEAD на master
                       --boundary  - вместе с последнем общем коммитом !!!
---------------------------------------------------------------------------
git log master...branchName --boundary --graph

    Эта команда выводит наглядно все коммиты !!!

* 4594f10 (HEAD->master)
* 2fad3ac
|  * 2c11f12 (branchName)
|  * 2702040
| /
o 54a4be6
========================================================================

git log --pretty=oneline --since='30 minutes ago'  -  коммиты
                                                      за последнии 30 минут
git log --pretty=oneline --until='30 minutes ago'  -  коммиты до 30 минут
                                                      за текущее время
git log --before '2 month ago'                     -  коммиты до 2 месяца
                                                      назад
git log --before '2022-03-17'
git log --after '2022-03-17'
git log --after '2022-03-17 08:30:00 +03'
git log --pretty=oneline --max-count=2
git log --pretty=oneline --autor=youName

git log --pretty=format:  %h  - сокращённый идентификатор киммита
                          %cd   - дата
                          |     - для красоты
                          %s    - первая строка описания
                          %d    - декарирование (какие ссылки указывают)
                          [%an] - имя автора
                     (полный список - git help log)
git log --pretty=format:'%h %cd | %c%d [%an]'
Выделить цветом:
git log --pretty=format:'%С(yellow)%h %C(cyan)%cd | %c%d [%an]'
                  (полный список цветов - git help config)
git log --pretty=format:"%h | %ad | %s%d [%an]" --graph --date=short
                                                        --date=format:'%F %R'
    Чтобы долго не набирать  -  сделать алиас !!!
==============================================================================
                     someWord - В ОПИСАНИИ КОММИТА !!!

git log --grep someWord             -  найдёт коммиты содержащие слово someWord
                                       на текущей ветке
git log --grep someWord -i          -  найдёт коммиты содержащие слово someWord
                                       на текущей ветке, без учёта регистра
git log --grep someWord branchName  -  найдёт коммиты содержащие слово someWord
                                       на ветке branchName
git log --grep someWord someWord_2  -  найдёт коммиты содержащие слово someWord
                                       ИЛИ слово someWord_2 на текущей ветке
git log --grep someWord someWord_2 --all-match
                                    -  найдёт коммиты содержащие слово someWord
                                       И слово someWord_2 на текущей ветке

                someString В САМОМ КОММИТЕ

git log -G someString               -  найдёт коммиты содержащие слово someString
                                       на текущей ветке
git log -G someString -p            -  найдёт коммиты содержащие слово someString
                                       на текущей ветке, с показом изменений
git log -G someString -p fileNam    -  найдёт коммиты содержащие слово someString
                                       на текущей ветке, с показом изменений,
                                       только файла fileName
git log -G 'metod myMetod\(' -p     -  если искать строку, то в кавычках '_',
                                       если спец символы, то экранировать \

            Регулярные выражения

git log --grep 'someWord(someWord_2 | someWord_3)'     -  старый стандарт
git log --grep 'someWord(someWord_2 | someWord_3)' -P  -  перл совместимый

  Разница между строкой someString_1 и строкой some/String_2 в файле fileName:

git log -L '/someString_1/','/some\/String_2/': fileName
                 (если спец символ,например, / , то его надо экранировать)

git log -L '/^someString_1/','/^}/': fileName
                 (символ ^ - означает поиск в начале строки !!!)
git log --autor=serega      - поиск по автору
git log --commiter=serega   - поиск по коммитеру
==============================================================================
git blame fileName                     - построково, кто что написал
git blame fileName --date=shot -L 5,8  - дата короче, только 5 и 8 строки
----------------------------------------------------------------------------
git show                          - просмотр коммита (HEAD по умолчанию)
git show --quiet                  - просмотр краткой инф. коммита
git show + идентификатор          - просмотр конкретного коммита
git show HEAD~                    - просмотр предыдущего коммита
git show HEAD~~ (или HEAD~2)      - просмотр пред,предыдущего коммита
git show @~:fileName              - просмотр кода файла предыдущего коммита
git show branchName:fileName      - просмотр кода файла на ветке branchName
git show :fileName                - просмотр кода файла, находящегося в индексе
git show --pretty=fuller          -   просмотр коммита (больше информации)
git show + идентификатор + --pretty=fuller
git show :/someWord               - просмотр предыдущего коммита,
                                    содержащего слово someWord
cat .git/HEAD                     -  узнать где HEAD
-------------------------------------------------------------------------
    HEAD == @ !!!

git update-fileName --chmod=+x  fileName.html   (для windows)
        сделает файл исполнимом на linux системах !!!
git commit —author=`John Smith <john@mail.com>` --date=`...`  -
                                                      изменение автора !!!

В папке gitignore создать файл, прописать в нём .txt - git будет
                                                 игнорировать файлы .txt
git add -f .txt/путь к файлу - этот файл перестанет игнорироваться !!!
