                                              Логируем свои сообщения

  Проект Catsgram — уже настоящее веб-приложение, но в нём пока нет большого количества бизнес-логики.
Поэтому необходимости записывать что-то в лог тоже нет. Однако часто при отладке веб-приложений требуется логировать сведения об http-запросах.
Добавим эту информацию для контроллера SimpleController.

  В контроллере SimpleController создайте логер и сохраните его в переменной log.
В методе homePage отправьте в лог сообщение “Получен запрос.” с уровнем важности INFO.
После внесения изменений запустите проект и отправьте GET-запрос по URL-адресу http://localhost:8080/home.
Посмотрите лог приложения в консоли или в окне “Run” среды разработки — там будет выведено сообщение, отправленное нами в лог:

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class SimpleController {
    // создаём логер
    private static final Logger log = LoggerFactory.getLogger(SimpleController.class);

    @GetMapping("/home")
    public String homePage() {
        // логируем факт получения запроса
        log.info("Получен запрос.");

        // возвращаем ответ в виде строки
        return "Котограм";
    }
}

                                        Управляем уровнем логирования

  Добавленное нами сообщение предназначено для отладки, а логируется с уровнем INFO.
Дело в том, что Spring Boot автоматически применяет ряд настроек для корневого логера, в том числе устанавливает его уровень важности равным INFO.
А логер, созданный в SimpleController, унаследовал эти настройки. Поэтому, если поменять уровень важности сообщения на DEBUG, оно не будет выведено.
Помимо изученного нами способа с помощью метода setLevel класса Logger,
изменить уровень любого логера в Spring-приложении можно в конфигурационном файле application.properties.
Для этого нужно добавить строку следующего формата:                         logging.level.полное_имя_логгера=уровень_важности.
Например, чтобы изменить уровень нашего логера, нужно добавить следующую строку:
                                                                            logging.level.ru.yandex.practicum.catsgram.SimpleController=DEBUG

  Чтобы изменить уровень всех созданных нами логеров, необязательно перечислять каждый из них в конфигурационном файле.
Достаточно указать названия пакетов, объединяющих все нужные классы. Например:
                                                                            logging.level.ru.yandex.practicum=debug
  Это изменит уровень для всех логеров, у которых имена начинаются на “ru.yandex.practicum”.

                                          Логируем больше информации

  Факт того, что приложение приняло http-запрос, полезен для отладки, но из логов непонятно, что именно это был за запрос. Добавить информацию можно несколькими способами.
Первый — сделать это вручную.

  package ru.yandex.practicum.catsgram;

  import org.slf4j.Logger;
  import org.slf4j.LoggerFactory;
  import org.springframework.stereotype.Controller;
  import org.springframework.web.bind.annotation.RequestMapping;
  import org.springframework.web.bind.annotation.ResponseBody;

  @Controller
  public class SimpleController {
      // создаём логер
      private static final Logger log = LoggerFactory.getLogger(SimpleController.class);

      @GetMapping("/home")
      public String homePage() {
          // логируем факт получения запроса
          log.debug("Получен запрос GET /home.");

          // возвращаем ответ в виде строки
          return "Котограм";
      }
  }

  Плюсы такого подхода: разработчик сам определяет формат сообщений и где именно они будут отображаться.
Минусы — обновлять информацию придётся вручную: если путь эндпоинта изменится, информацию в логе тоже нужно будет поменять.
Если логировать необходимо все запросы, добавлять логирование в каждый эндпоинт может быть утомительно.
Второй способ — отображать логирование средствами Spring Framework.
Чтобы увидеть информацию о запросах, нужно изменить уровень логера org.springframework.web.servlet.DispatcherServlet на DEBUG:

  logging.level.org.springframework.web.servlet.DispatcherServlet=debug

  Тогда при выполнении GET-запроса по URL-адресу http://localhost:8080/home?param=value в лог приложения будет выведена следующая информация:

  Наконец, третий способ — использовать стороннюю библиотеку. Одна из таких библиотек — LogBook.
Добавить её довольно просто. Для этого необходимо создать следующую зависимость:

  <dependency>
      <groupId>org.zalando</groupId>
      <artifactId>logbook-spring-boot-starter</artifactId>
      <version>2.14.0</version>
  </dependency>

  Логирование происходит с уровнем TRACE, поэтому для отображения логов также необходимо изменить уровень логирования соответствующего пакета:

  logging.level.org.zalando.logbook=TRACE

  Результат — логирование входящих и исходящих запросов в формате JSON:

  Разберём их форматы.

      В поле type находится тип лога — request для запроса или response для ответа;
      В поле headers — заголовки запроса/ответа;
      В поле body — тело запроса/ответа.

  Входящий запрос:

      В поле method — HTTP-метод запроса;
      В поле uri — URI запроса, по которому был вызван метод;
      В поле path — путь запроса.

  Ответ:

      В поле duration — время продолжительности ответа (в миллисекундах);
      В поле status — HTTP-статус ответа.

  Домашнее задание

      Попробуйте добавить библиотеку LogBook в проект самостоятельно.
      Для эндпоинта GET /users добавьте логирование количества пользователей в текущий момент.
      Для методов POST /post и POST /users добавьте логирование объектов, которые будут сохраняться.

  Ура! Теперь вы умеете логировать важную информацию (включая запросы), параметризировать логи и управлять уровнями логирования на уровне всего приложения.

  log.info("Вы - {}!", "молодец");

  Итоговый вариант проекта Catsgam можно посмотреть в ветке logging_logging-your-messages.
  
