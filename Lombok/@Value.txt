
  Для создания неизменяемого объекта в Lombok есть аннотация @Value. Она похожа на @Data, но:

-  не генерирует сеттеры;
-  генерирует final- и private-поля для объекта;
-  использует конструктор, куда передаются все поля (то есть возможности аннотации @AllArgsConstructor).

====================================================================================================================

  Применим аннотацию @Value. Для создания неизменяемого объекта можно также воспользоваться паттерном билдер или вызвать конструктор со всеми аргументами.

package ru.yandex.practicum;

import lombok.Value;
import lombok.Builder;

@Value
@Builder
public class Point {
    private int x;
    private int y;
}

------------------------------------------------------------------------------------------------

package ru.yandex.practicum;

public class Points {

    public static void main(String[] args) {
        final Point point1 = Point.builder().x(0).build();
        System.out.println(point1);
        final Point point2 = new Point(0, 0);
        System.out.println(point2);
    }
}

------------------------------------------------------------------------------------------------

  Разработчику может понадобиться изменить значение какого-либо поля объекта.
Если это изменяемый объект, достаточно вызвать сеттер с нужным значением и установить его.
В случае с неизменяемыми объектами для каждого такого изменения потребуется новый объект.

  Строить объект заново неудобно. Зато можно скопировать уже существующий.
Для этого необходимо добавить преобразование готового неизменяемого объекта в билдер с помощью дополнительного флага
в аннотации: @Builder(toBuilder = true). Код копирования будет выглядеть так.

final Point point1 = Point.builder().x(0).y(0).build();
System.out.println(point1);
final Point point2 = point1.toBuilder().y(3).build();
System.out.println(point2);

  Метод toBuilder() вернёт билдер с уже проинициализированными на основе исходного объекта полями.
После этого в них можно поменять какое-либо значение и сконструировать нужный объект.
