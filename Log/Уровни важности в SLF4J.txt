                                                  Уровни важности в SLF4J

В фреймворке SLF4J есть пять уровней важности записей:

-  TRACE (англ. «отслеживать») — для трассировочных сообщений, которые предоставляют очень подробную информацию о каком-либо процессе.
   Сама запись при этом может и не содержать большого объёма данных. Подробность достигается за счёт количества записей.
   На этом уровне может записываться всё, что происходит в системе: выбор ветки в условии if — else, значения параметров внутри циклов,
   каждый шаг алгоритма и так далее.

-  DEBUG (англ. «отлаживать») — для отладочных сообщений, которые важны во время анализа некорректного поведения программы.
   Чаще всего в записях с таким уровнем содержится информация о значениях переменных, которые относятся к бизнес-логике приложения.

-  INFO (англ. «информация») — для сообщений, которые помогают понять текущее состояние программы.
   Например, это может быть информация о статусе обработки какого-либо запроса, результате авторизации пользователя,
   сведения об IP-адресе или сетевом порте, на котором запустилось веб-приложение.

-  WARN (англ. «предупреждать») — для сообщений с предупреждениями, которые появляются в случае, если что-то пошло не так.
   Например, если было сгенерировано исключение или обнаружена проблема в ходе выполнения алгоритма —
   допустим, переданы данные в неверном формате. При этом программа может обработать эту ситуацию самостоятельно и продолжить работу.

-  ERROR (англ. «ошибка») — для сообщений о критических ошибках, требующих оперативного вмешательства,
   без которого программа не сможет продолжить работу. Это могут быть такие ситуации: нехватка ресурсов,
   невозможность установить соединение с базой данных и так далее.

                                        Применение уровней важности в коде

   Чтобы записать событие в лог, нужно указать, к какому уровню важности оно принадлежит.
Фреймворк SLF4J предоставляет для этого удобные методы: trace, debug, info, warn и error с разными входными параметрами.
   Вот наиболее часто встречаемые комбинации входных параметров:

-  String msg — метод логирует только переданное сообщение;
-  String format, Object... arguments — метод логирует сообщение со значениями аргументов.
   Для обозначения места вставки в строке format используют сочетание символов {}.
   Например, logger.info("Пользователь {} сменил статус на {}.", "Григорий Логинов", "Занят"); добавит в лог запись
   "Пользователь Григорий Логинов сменил статус на Занят.".
-  String msg, Throwable t — такие параметры особенно полезны при логировании сообщения в блоке catch в конструкции try:
   здесь можно вывести в лог и полученное исключение, и своё сообщение к нему.

  В процессе работы над программой разработчики логируют информацию, классифицируя её по уровню важности (это уровень важности сообщения).
Когда программа запускается, то для логеров устанавливается уровень, который позволяет допускать в логи только сообщения нужной важности
(это настройка уровня важности логера).
По умолчанию корневой логер пропускает все сообщения, кроме трассировочных. Но это можно изменить:
если вручную указать логеру определённый уровень важности, он будет записывать только те сообщения, у которых уровень равен или выше установленного.
Иерархия уровней выглядит так: (от наименее важного к наиболее важному):

                                            TRACE < DEBUG < INFO < WARN < ERROR.

  Если логеру установить уровень важности INFO, он будет записывать только сообщения с уровнем INFO, WARN и ERROR, а остальные игнорировать.
Если установить уровень TRACE, то логер запишет все сообщения.
Обычно на этапе разработки логерам выставляют уровень DEBUG, чтобы получать больше информации.
А когда программа открывается для пользователей, уровень логера меняют на WARN — чтобы отслеживать только важные сообщения.
Использование уровня TRACE не рекомендуется разработчиками API SLF4J, так как записи этого уровня загромождают журнал,
несут мало полезной информации и ухудшают производительность программы.
В Logback у логеров есть дополнительный уровень настройки — OFF, он отключает запись любых сообщений в лог.
На практике он может пригодиться в том случае, если нужно повысить скорость работы программы.
Потому что даже приложения среднего размера могут генерировать тысячи запросов к журналу.
Чтобы поменять уровень логера, нужно получить доступ к его реализации. Фабрика LoggerFactory абстрагирует от нас конкретную реализацию
и возвращает свой интерфейс org.slf4j.Logger, в котором нет нужного метода.
Поэтому возвращаемый объект нужно привести к типу логера конкретной системы. В Logback это класс ch.qos.logback.classic.Logger,
в котором есть метод  setLevel(Level newLevel) для установки нужного уровня.
